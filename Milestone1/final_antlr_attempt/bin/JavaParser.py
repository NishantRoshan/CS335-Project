# Generated from JavaParser.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,128,1718,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,1,0,1,0,1,1,1,1,1,2,1,2,1,2,3,2,250,8,2,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,5,4,259,8,4,10,4,12,4,262,9,4,1,5,5,5,265,8,5,10,5,12,
        5,268,9,5,1,5,1,5,3,5,272,8,5,1,5,5,5,275,8,5,10,5,12,5,278,9,5,
        1,5,1,5,5,5,282,8,5,10,5,12,5,285,9,5,1,6,1,6,1,7,5,7,290,8,7,10,
        7,12,7,293,9,7,1,7,1,7,1,7,5,7,298,8,7,10,7,12,7,301,9,7,1,7,3,7,
        304,8,7,1,8,1,8,1,8,5,8,309,8,8,10,8,12,8,312,9,8,1,9,1,9,5,9,316,
        8,9,10,9,12,9,319,9,9,1,9,1,9,1,9,3,9,324,8,9,3,9,326,8,9,1,10,1,
        10,1,10,1,10,5,10,332,8,10,10,10,12,10,335,9,10,1,10,1,10,1,11,1,
        11,1,11,3,11,342,8,11,1,11,1,11,3,11,346,8,11,3,11,348,8,11,1,12,
        1,12,1,12,1,12,1,12,3,12,355,8,12,1,13,1,13,3,13,359,8,13,1,13,1,
        13,1,14,1,14,3,14,365,8,14,1,14,1,14,5,14,369,8,14,10,14,12,14,372,
        9,14,1,14,1,14,3,14,376,8,14,1,15,1,15,1,15,3,15,381,8,15,1,15,5,
        15,384,8,15,10,15,12,15,387,9,15,1,15,1,15,3,15,391,8,15,1,16,3,
        16,394,8,16,1,16,5,16,397,8,16,10,16,12,16,400,9,16,1,16,5,16,403,
        8,16,10,16,12,16,406,9,16,1,16,1,16,1,16,3,16,411,8,16,1,17,5,17,
        414,8,17,10,17,12,17,417,9,17,1,17,1,17,1,17,1,17,1,18,1,18,3,18,
        425,8,18,1,18,1,18,1,18,3,18,430,8,18,1,18,1,18,1,19,3,19,435,8,
        19,1,19,1,19,1,19,1,19,1,20,5,20,442,8,20,10,20,12,20,445,9,20,1,
        20,1,20,1,20,1,20,1,20,3,20,452,8,20,1,20,3,20,455,8,20,1,21,1,21,
        5,21,459,8,21,10,21,12,21,462,9,21,1,21,1,21,1,22,1,22,5,22,468,
        8,22,10,22,12,22,471,9,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,
        480,8,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,488,8,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,502,8,22,1,
        23,1,23,1,23,1,23,1,23,3,23,509,8,23,1,24,1,24,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,523,8,25,1,26,1,26,1,26,3,
        26,528,8,26,1,26,1,26,3,26,532,8,26,1,26,1,26,3,26,536,8,26,1,26,
        1,26,3,26,540,8,26,1,26,1,26,1,27,1,27,1,27,1,27,5,27,548,8,27,10,
        27,12,27,551,9,27,1,27,1,27,1,28,1,28,5,28,557,8,28,10,28,12,28,
        560,9,28,1,28,1,28,1,29,1,29,3,29,566,8,29,1,29,1,29,5,29,570,8,
        29,10,29,12,29,573,9,29,1,29,3,29,576,8,29,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,3,30,588,8,30,1,31,1,31,1,31,1,31,1,
        32,1,32,1,32,5,32,597,8,32,10,32,12,32,600,9,32,1,33,1,33,1,33,3,
        33,605,8,33,1,34,1,34,1,34,5,34,610,8,34,10,34,12,34,613,9,34,1,
        35,1,35,3,35,617,8,35,1,36,1,36,1,36,1,36,1,36,5,36,624,8,36,10,
        36,12,36,627,9,36,1,36,1,36,3,36,631,8,36,1,36,1,36,1,37,1,37,1,
        37,1,37,5,37,639,8,37,10,37,12,37,642,9,37,1,37,1,37,1,38,1,38,1,
        38,5,38,649,8,38,10,38,12,38,652,9,38,1,38,1,38,3,38,656,8,38,1,
        38,3,38,659,8,38,1,39,1,39,3,39,663,8,39,1,39,1,39,1,39,3,39,668,
        8,39,1,39,3,39,671,8,39,3,39,673,8,39,1,39,1,39,1,40,5,40,678,8,
        40,10,40,12,40,681,9,40,1,40,1,40,1,40,1,41,1,41,3,41,688,8,41,1,
        42,1,42,3,42,692,8,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,3,44,701,
        8,44,1,44,1,44,1,45,1,45,1,45,1,45,3,45,709,8,45,1,45,1,45,3,45,
        713,8,45,1,45,3,45,716,8,45,1,45,3,45,719,8,45,1,45,1,45,1,46,1,
        46,1,46,5,46,726,8,46,10,46,12,46,729,9,46,1,47,5,47,732,8,47,10,
        47,12,47,735,9,47,1,47,1,47,3,47,739,8,47,1,47,3,47,742,8,47,1,48,
        1,48,5,48,746,8,48,10,48,12,48,749,9,48,1,49,1,49,1,49,3,49,754,
        8,49,1,49,1,49,1,49,3,49,759,8,49,1,49,1,49,1,50,1,50,3,50,765,8,
        50,1,50,1,50,1,51,1,51,1,51,5,51,772,8,51,10,51,12,51,775,9,51,1,
        52,1,52,1,52,1,53,1,53,1,53,5,53,783,8,53,10,53,12,53,786,9,53,1,
        53,1,53,1,54,5,54,791,8,54,10,54,12,54,794,9,54,1,54,1,54,1,54,1,
        55,1,55,1,55,3,55,802,8,55,1,55,1,55,3,55,806,8,55,1,55,1,55,3,55,
        810,8,55,1,55,1,55,1,56,1,56,5,56,816,8,56,10,56,12,56,819,9,56,
        1,56,1,56,1,57,1,57,3,57,825,8,57,1,58,1,58,1,58,1,59,5,59,831,8,
        59,10,59,12,59,834,9,59,1,59,1,59,3,59,838,8,59,1,60,1,60,1,60,1,
        60,1,60,1,60,1,60,1,60,3,60,848,8,60,1,61,1,61,1,61,1,61,5,61,854,
        8,61,10,61,12,61,857,9,61,1,61,1,61,1,62,1,62,1,62,5,62,864,8,62,
        10,62,12,62,867,9,62,1,62,1,62,1,62,1,63,5,63,873,8,63,10,63,12,
        63,876,9,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,3,64,886,8,64,
        1,65,5,65,889,8,65,10,65,12,65,892,9,65,1,65,1,65,1,65,1,66,5,66,
        898,8,66,10,66,12,66,901,9,66,1,66,1,66,1,66,1,66,1,66,5,66,908,
        8,66,10,66,12,66,911,9,66,1,66,1,66,3,66,915,8,66,1,66,1,66,1,67,
        1,67,1,67,1,68,1,68,1,68,5,68,925,8,68,10,68,12,68,928,9,68,1,68,
        1,68,1,68,1,69,1,69,1,69,3,69,936,8,69,1,69,1,69,1,69,3,69,941,8,
        69,1,69,3,69,944,8,69,1,70,1,70,1,70,5,70,949,8,70,10,70,12,70,952,
        9,70,1,71,1,71,1,71,1,71,1,72,1,72,1,72,3,72,961,8,72,1,73,1,73,
        1,73,1,73,5,73,967,8,73,10,73,12,73,970,9,73,3,73,972,8,73,1,73,
        3,73,975,8,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,75,1,75,5,75,
        986,8,75,10,75,12,75,989,9,75,1,75,1,75,1,76,5,76,994,8,76,10,76,
        12,76,997,9,76,1,76,1,76,3,76,1001,8,76,1,77,1,77,1,77,1,77,1,77,
        1,77,3,77,1009,8,77,1,77,1,77,3,77,1013,8,77,1,77,1,77,3,77,1017,
        8,77,1,77,1,77,3,77,1021,8,77,1,77,1,77,3,77,1025,8,77,3,77,1027,
        8,77,1,78,1,78,3,78,1031,8,78,1,79,1,79,1,79,1,79,3,79,1037,8,79,
        1,80,1,80,1,81,1,81,1,81,1,81,5,81,1045,8,81,10,81,12,81,1048,9,
        81,1,81,3,81,1051,8,81,3,81,1053,8,81,1,81,1,81,1,82,1,82,5,82,1059,
        8,82,10,82,12,82,1062,9,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,3,
        83,1071,8,83,1,84,5,84,1074,8,84,10,84,12,84,1077,9,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,3,84,1087,8,84,1,85,1,85,1,85,1,85,
        1,85,3,85,1094,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1103,
        8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,4,85,1124,8,85,11,85,12,85,1125,
        1,85,3,85,1129,8,85,1,85,3,85,1132,8,85,1,85,1,85,1,85,1,85,5,85,
        1138,8,85,10,85,12,85,1141,9,85,1,85,3,85,1144,8,85,1,85,1,85,1,
        85,1,85,5,85,1150,8,85,10,85,12,85,1153,9,85,1,85,5,85,1156,8,85,
        10,85,12,85,1159,9,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,
        85,1169,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1178,8,85,1,
        85,1,85,1,85,3,85,1183,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
        85,1,85,1,85,1,85,3,85,1196,8,85,1,85,1,85,1,85,1,85,3,85,1202,8,
        85,1,86,1,86,5,86,1206,8,86,10,86,12,86,1209,9,86,3,86,1211,8,86,
        1,87,4,87,1214,8,87,11,87,12,87,1215,1,87,4,87,1219,8,87,11,87,12,
        87,1220,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1229,8,88,1,88,1,88,1,
        88,3,88,1234,8,88,1,89,1,89,3,89,1238,8,89,1,90,1,90,3,90,1242,8,
        90,1,90,1,90,3,90,1246,8,90,1,90,1,90,3,90,1250,8,90,3,90,1252,8,
        90,1,91,5,91,1255,8,91,10,91,12,91,1258,9,91,1,91,1,91,3,91,1262,
        8,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,5,92,1271,8,92,10,92,12,
        92,1274,9,92,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,5,93,1284,8,
        93,10,93,12,93,1287,9,93,1,94,1,94,1,94,1,95,1,95,1,95,3,95,1295,
        8,95,1,95,1,95,1,96,1,96,1,96,5,96,1302,8,96,10,96,12,96,1305,9,
        96,1,97,5,97,1308,8,97,10,97,12,97,1311,9,97,1,97,1,97,1,97,1,97,
        1,97,3,97,1318,8,97,1,97,1,97,1,97,1,97,3,97,1324,8,97,1,98,5,98,
        1327,8,98,10,98,12,98,1330,9,98,1,98,1,98,5,98,1334,8,98,10,98,12,
        98,1337,9,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,
        99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1357,8,99,3,99,1359,8,
        99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1368,8,100,1,
        101,1,101,1,102,1,102,1,103,1,103,1,103,3,103,1377,8,103,1,104,1,
        104,1,104,1,104,1,104,1,104,1,104,5,104,1386,8,104,10,104,12,104,
        1389,9,104,1,104,1,104,1,104,5,104,1394,8,104,10,104,12,104,1397,
        9,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,3,104,1410,8,104,1,104,1,104,3,104,1414,8,104,1,104,1,104,
        1,104,3,104,1419,8,104,1,104,1,104,3,104,1423,8,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,3,104,1439,8,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1479,
        8,104,1,104,1,104,1,104,1,104,3,104,1485,8,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1498,8,104,
        1,104,1,104,1,104,3,104,1503,8,104,1,104,5,104,1506,8,104,10,104,
        12,104,1509,9,104,1,105,1,105,1,105,1,105,5,105,1515,8,105,10,105,
        12,105,1518,9,105,1,105,1,105,1,106,1,106,1,106,1,106,3,106,1526,
        8,106,1,106,1,106,1,106,1,106,1,106,3,106,1533,8,106,1,107,1,107,
        1,107,5,107,1538,8,107,10,107,12,107,1541,9,107,1,108,5,108,1544,
        8,108,10,108,12,108,1547,9,108,1,108,1,108,5,108,1551,8,108,10,108,
        12,108,1554,9,108,1,108,1,108,1,108,1,109,1,109,1,109,5,109,1562,
        8,109,10,109,12,109,1565,9,109,1,110,5,110,1568,8,110,10,110,12,
        110,1571,9,110,1,110,1,110,1,110,3,110,1576,8,110,1,111,1,111,1,
        111,1,111,1,112,1,112,1,112,5,112,1585,8,112,10,112,12,112,1588,
        9,112,1,113,1,113,1,113,3,113,1593,8,113,1,113,1,113,1,113,1,113,
        1,113,3,113,1600,8,113,1,113,1,113,1,113,1,113,3,113,1606,8,113,
        1,113,3,113,1609,8,113,1,114,1,114,1,114,1,114,1,114,1,114,5,114,
        1617,8,114,10,114,12,114,1620,9,114,1,114,1,114,5,114,1624,8,114,
        10,114,12,114,1627,9,114,1,114,1,114,1,114,5,114,1632,8,114,10,114,
        12,114,1635,9,114,3,114,1637,8,114,1,114,1,114,1,114,5,114,1642,
        8,114,10,114,12,114,1645,9,114,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,3,115,1654,8,115,3,115,1656,8,115,1,116,1,116,3,116,1660,8,
        116,1,116,1,116,1,116,3,116,1665,8,116,5,116,1667,8,116,10,116,12,
        116,1670,9,116,1,116,3,116,1673,8,116,1,117,1,117,3,117,1677,8,117,
        1,117,1,117,1,118,1,118,1,118,1,118,5,118,1685,8,118,10,118,12,118,
        1688,9,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,5,118,1697,
        8,118,10,118,12,118,1700,9,118,1,118,1,118,5,118,1704,8,118,10,118,
        12,118,1707,9,118,3,118,1709,8,118,1,119,1,119,3,119,1713,8,119,
        1,120,1,120,1,120,1,120,0,2,208,228,121,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
        138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
        170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,
        202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
        234,236,238,240,0,16,2,0,51,65,128,128,3,0,51,60,63,65,128,128,8,
        0,3,3,5,5,8,8,14,14,20,20,27,27,29,29,37,37,2,0,17,17,40,40,2,0,
        38,38,60,60,1,0,76,79,1,0,80,81,1,0,103,106,1,0,93,94,2,0,107,108,
        112,112,1,0,105,106,2,0,91,92,98,99,2,0,97,97,100,100,2,0,90,90,
        113,123,1,0,103,104,2,0,96,96,124,124,1912,0,242,1,0,0,0,2,244,1,
        0,0,0,4,249,1,0,0,0,6,251,1,0,0,0,8,255,1,0,0,0,10,266,1,0,0,0,12,
        286,1,0,0,0,14,291,1,0,0,0,16,305,1,0,0,0,18,325,1,0,0,0,20,327,
        1,0,0,0,22,347,1,0,0,0,24,354,1,0,0,0,26,356,1,0,0,0,28,370,1,0,
        0,0,30,380,1,0,0,0,32,410,1,0,0,0,34,415,1,0,0,0,36,422,1,0,0,0,
        38,434,1,0,0,0,40,454,1,0,0,0,42,456,1,0,0,0,44,501,1,0,0,0,46,508,
        1,0,0,0,48,510,1,0,0,0,50,522,1,0,0,0,52,524,1,0,0,0,54,543,1,0,
        0,0,56,554,1,0,0,0,58,575,1,0,0,0,60,587,1,0,0,0,62,589,1,0,0,0,
        64,593,1,0,0,0,66,601,1,0,0,0,68,606,1,0,0,0,70,616,1,0,0,0,72,618,
        1,0,0,0,74,634,1,0,0,0,76,658,1,0,0,0,78,660,1,0,0,0,80,679,1,0,
        0,0,82,687,1,0,0,0,84,691,1,0,0,0,86,693,1,0,0,0,88,696,1,0,0,0,
        90,704,1,0,0,0,92,722,1,0,0,0,94,733,1,0,0,0,96,743,1,0,0,0,98,750,
        1,0,0,0,100,762,1,0,0,0,102,768,1,0,0,0,104,776,1,0,0,0,106,779,
        1,0,0,0,108,792,1,0,0,0,110,798,1,0,0,0,112,813,1,0,0,0,114,824,
        1,0,0,0,116,826,1,0,0,0,118,837,1,0,0,0,120,847,1,0,0,0,122,849,
        1,0,0,0,124,860,1,0,0,0,126,874,1,0,0,0,128,885,1,0,0,0,130,890,
        1,0,0,0,132,899,1,0,0,0,134,918,1,0,0,0,136,926,1,0,0,0,138,935,
        1,0,0,0,140,945,1,0,0,0,142,953,1,0,0,0,144,960,1,0,0,0,146,962,
        1,0,0,0,148,978,1,0,0,0,150,983,1,0,0,0,152,1000,1,0,0,0,154,1026,
        1,0,0,0,156,1030,1,0,0,0,158,1032,1,0,0,0,160,1038,1,0,0,0,162,1040,
        1,0,0,0,164,1056,1,0,0,0,166,1070,1,0,0,0,168,1075,1,0,0,0,170,1201,
        1,0,0,0,172,1210,1,0,0,0,174,1213,1,0,0,0,176,1233,1,0,0,0,178,1237,
        1,0,0,0,180,1251,1,0,0,0,182,1256,1,0,0,0,184,1267,1,0,0,0,186,1280,
        1,0,0,0,188,1288,1,0,0,0,190,1291,1,0,0,0,192,1298,1,0,0,0,194,1323,
        1,0,0,0,196,1328,1,0,0,0,198,1358,1,0,0,0,200,1367,1,0,0,0,202,1369,
        1,0,0,0,204,1371,1,0,0,0,206,1376,1,0,0,0,208,1422,1,0,0,0,210,1510,
        1,0,0,0,212,1532,1,0,0,0,214,1534,1,0,0,0,216,1545,1,0,0,0,218,1558,
        1,0,0,0,220,1569,1,0,0,0,222,1577,1,0,0,0,224,1581,1,0,0,0,226,1608,
        1,0,0,0,228,1636,1,0,0,0,230,1655,1,0,0,0,232,1672,1,0,0,0,234,1674,
        1,0,0,0,236,1680,1,0,0,0,238,1710,1,0,0,0,240,1714,1,0,0,0,242,243,
        7,0,0,0,243,1,1,0,0,0,244,245,7,1,0,0,245,3,1,0,0,0,246,247,5,92,
        0,0,247,250,5,91,0,0,248,250,3,6,3,0,249,246,1,0,0,0,249,248,1,0,
        0,0,250,5,1,0,0,0,251,252,5,92,0,0,252,253,3,8,4,0,253,254,5,91,
        0,0,254,7,1,0,0,0,255,260,3,10,5,0,256,257,5,68,0,0,257,259,3,10,
        5,0,258,256,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,
        0,0,261,9,1,0,0,0,262,260,1,0,0,0,263,265,3,138,69,0,264,263,1,0,
        0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,271,1,0,
        0,0,268,266,1,0,0,0,269,272,3,28,14,0,270,272,3,12,6,0,271,269,1,
        0,0,0,271,270,1,0,0,0,272,283,1,0,0,0,273,275,3,138,69,0,274,273,
        1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,
        1,0,0,0,278,276,1,0,0,0,279,280,5,74,0,0,280,282,5,75,0,0,281,276,
        1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,11,1,
        0,0,0,285,283,1,0,0,0,286,287,7,2,0,0,287,13,1,0,0,0,288,290,3,138,
        69,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,
        0,0,292,294,1,0,0,0,293,291,1,0,0,0,294,303,3,0,0,0,295,299,5,17,
        0,0,296,298,3,138,69,0,297,296,1,0,0,0,298,301,1,0,0,0,299,297,1,
        0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,299,1,0,0,0,302,304,3,
        16,8,0,303,295,1,0,0,0,303,304,1,0,0,0,304,15,1,0,0,0,305,310,3,
        10,5,0,306,307,5,109,0,0,307,309,3,10,5,0,308,306,1,0,0,0,309,312,
        1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,17,1,0,0,0,312,310,1,
        0,0,0,313,326,3,10,5,0,314,316,3,138,69,0,315,314,1,0,0,0,316,319,
        1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,317,
        1,0,0,0,320,323,5,95,0,0,321,322,7,3,0,0,322,324,3,10,5,0,323,321,
        1,0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,325,313,1,0,0,0,325,317,
        1,0,0,0,326,19,1,0,0,0,327,328,5,92,0,0,328,333,3,18,9,0,329,330,
        5,68,0,0,330,332,3,18,9,0,331,329,1,0,0,0,332,335,1,0,0,0,333,331,
        1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,333,1,0,0,0,336,337,
        5,91,0,0,337,21,1,0,0,0,338,348,3,26,13,0,339,341,5,69,0,0,340,342,
        3,20,10,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,345,
        3,0,0,0,344,346,3,26,13,0,345,344,1,0,0,0,345,346,1,0,0,0,346,348,
        1,0,0,0,347,338,1,0,0,0,347,339,1,0,0,0,348,23,1,0,0,0,349,350,5,
        40,0,0,350,355,3,22,11,0,351,352,3,0,0,0,352,353,3,26,13,0,353,355,
        1,0,0,0,354,349,1,0,0,0,354,351,1,0,0,0,355,25,1,0,0,0,356,358,5,
        70,0,0,357,359,3,224,112,0,358,357,1,0,0,0,358,359,1,0,0,0,359,360,
        1,0,0,0,360,361,5,71,0,0,361,27,1,0,0,0,362,364,3,0,0,0,363,365,
        3,20,10,0,364,363,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,367,
        5,69,0,0,367,369,1,0,0,0,368,362,1,0,0,0,369,372,1,0,0,0,370,368,
        1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,370,1,0,0,0,373,375,
        3,2,1,0,374,376,3,20,10,0,375,374,1,0,0,0,375,376,1,0,0,0,376,29,
        1,0,0,0,377,378,3,28,14,0,378,379,5,69,0,0,379,381,1,0,0,0,380,377,
        1,0,0,0,380,381,1,0,0,0,381,385,1,0,0,0,382,384,3,138,69,0,383,382,
        1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,
        1,0,0,0,387,385,1,0,0,0,388,390,3,0,0,0,389,391,3,20,10,0,390,389,
        1,0,0,0,390,391,1,0,0,0,391,31,1,0,0,0,392,394,3,34,17,0,393,392,
        1,0,0,0,393,394,1,0,0,0,394,398,1,0,0,0,395,397,3,36,18,0,396,395,
        1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,404,
        1,0,0,0,400,398,1,0,0,0,401,403,3,40,20,0,402,401,1,0,0,0,403,406,
        1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,411,1,0,0,0,406,404,
        1,0,0,0,407,408,3,38,19,0,408,409,5,0,0,1,409,411,1,0,0,0,410,393,
        1,0,0,0,410,407,1,0,0,0,411,33,1,0,0,0,412,414,3,138,69,0,413,412,
        1,0,0,0,414,417,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,
        1,0,0,0,417,415,1,0,0,0,418,419,5,32,0,0,419,420,3,218,109,0,420,
        421,5,67,0,0,421,35,1,0,0,0,422,424,5,25,0,0,423,425,5,38,0,0,424,
        423,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,429,3,218,109,0,
        427,428,5,69,0,0,428,430,5,107,0,0,429,427,1,0,0,0,429,430,1,0,0,
        0,430,431,1,0,0,0,431,432,5,67,0,0,432,37,1,0,0,0,433,435,5,52,0,
        0,434,433,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,437,5,51,0,
        0,437,438,3,218,109,0,438,439,3,42,21,0,439,39,1,0,0,0,440,442,3,
        50,25,0,441,440,1,0,0,0,442,445,1,0,0,0,443,441,1,0,0,0,443,444,
        1,0,0,0,444,451,1,0,0,0,445,443,1,0,0,0,446,452,3,52,26,0,447,452,
        3,90,45,0,448,452,3,110,55,0,449,452,3,148,74,0,450,452,3,98,49,
        0,451,446,1,0,0,0,451,447,1,0,0,0,451,448,1,0,0,0,451,449,1,0,0,
        0,451,450,1,0,0,0,452,455,1,0,0,0,453,455,5,67,0,0,454,443,1,0,0,
        0,454,453,1,0,0,0,455,41,1,0,0,0,456,460,5,72,0,0,457,459,3,44,22,
        0,458,457,1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,
        0,461,463,1,0,0,0,462,460,1,0,0,0,463,464,5,73,0,0,464,43,1,0,0,
        0,465,469,5,53,0,0,466,468,3,48,24,0,467,466,1,0,0,0,468,471,1,0,
        0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,469,1,0,
        0,0,472,473,3,218,109,0,473,474,5,67,0,0,474,502,1,0,0,0,475,476,
        5,54,0,0,476,479,3,218,109,0,477,478,5,56,0,0,478,480,3,218,109,
        0,479,477,1,0,0,0,479,480,1,0,0,0,480,481,1,0,0,0,481,482,5,67,0,
        0,482,502,1,0,0,0,483,484,5,55,0,0,484,487,3,218,109,0,485,486,5,
        56,0,0,486,488,3,218,109,0,487,485,1,0,0,0,487,488,1,0,0,0,488,489,
        1,0,0,0,489,490,5,67,0,0,490,502,1,0,0,0,491,492,5,57,0,0,492,493,
        3,218,109,0,493,494,5,67,0,0,494,502,1,0,0,0,495,496,5,58,0,0,496,
        497,3,218,109,0,497,498,5,59,0,0,498,499,3,218,109,0,499,500,5,67,
        0,0,500,502,1,0,0,0,501,465,1,0,0,0,501,475,1,0,0,0,501,483,1,0,
        0,0,501,491,1,0,0,0,501,495,1,0,0,0,502,45,1,0,0,0,503,509,3,50,
        25,0,504,509,5,30,0,0,505,509,5,42,0,0,506,509,5,46,0,0,507,509,
        5,49,0,0,508,503,1,0,0,0,508,504,1,0,0,0,508,505,1,0,0,0,508,506,
        1,0,0,0,508,507,1,0,0,0,509,47,1,0,0,0,510,511,7,4,0,0,511,49,1,
        0,0,0,512,523,3,138,69,0,513,523,5,35,0,0,514,523,5,34,0,0,515,523,
        5,33,0,0,516,523,5,38,0,0,517,523,5,1,0,0,518,523,5,18,0,0,519,523,
        5,39,0,0,520,523,5,64,0,0,521,523,5,66,0,0,522,512,1,0,0,0,522,513,
        1,0,0,0,522,514,1,0,0,0,522,515,1,0,0,0,522,516,1,0,0,0,522,517,
        1,0,0,0,522,518,1,0,0,0,522,519,1,0,0,0,522,520,1,0,0,0,522,521,
        1,0,0,0,523,51,1,0,0,0,524,525,5,9,0,0,525,527,3,0,0,0,526,528,3,
        54,27,0,527,526,1,0,0,0,527,528,1,0,0,0,528,531,1,0,0,0,529,530,
        5,17,0,0,530,532,3,10,5,0,531,529,1,0,0,0,531,532,1,0,0,0,532,535,
        1,0,0,0,533,534,5,24,0,0,534,536,3,8,4,0,535,533,1,0,0,0,535,536,
        1,0,0,0,536,539,1,0,0,0,537,538,5,65,0,0,538,540,3,8,4,0,539,537,
        1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,3,56,28,0,542,53,
        1,0,0,0,543,544,5,92,0,0,544,549,3,14,7,0,545,546,5,68,0,0,546,548,
        3,14,7,0,547,545,1,0,0,0,548,551,1,0,0,0,549,547,1,0,0,0,549,550,
        1,0,0,0,550,552,1,0,0,0,551,549,1,0,0,0,552,553,5,91,0,0,553,55,
        1,0,0,0,554,558,5,72,0,0,555,557,3,58,29,0,556,555,1,0,0,0,557,560,
        1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,561,1,0,0,0,560,558,
        1,0,0,0,561,562,5,73,0,0,562,57,1,0,0,0,563,576,5,67,0,0,564,566,
        5,38,0,0,565,564,1,0,0,0,565,566,1,0,0,0,566,567,1,0,0,0,567,576,
        3,164,82,0,568,570,3,46,23,0,569,568,1,0,0,0,570,573,1,0,0,0,571,
        569,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,571,1,0,0,0,574,
        576,3,60,30,0,575,563,1,0,0,0,575,565,1,0,0,0,575,571,1,0,0,0,576,
        59,1,0,0,0,577,588,3,98,49,0,578,588,3,72,36,0,579,588,3,116,58,
        0,580,588,3,62,31,0,581,588,3,88,44,0,582,588,3,86,43,0,583,588,
        3,110,55,0,584,588,3,148,74,0,585,588,3,52,26,0,586,588,3,90,45,
        0,587,577,1,0,0,0,587,578,1,0,0,0,587,579,1,0,0,0,587,580,1,0,0,
        0,587,581,1,0,0,0,587,582,1,0,0,0,587,583,1,0,0,0,587,584,1,0,0,
        0,587,585,1,0,0,0,587,586,1,0,0,0,588,61,1,0,0,0,589,590,3,10,5,
        0,590,591,3,64,32,0,591,592,5,67,0,0,592,63,1,0,0,0,593,598,3,66,
        33,0,594,595,5,68,0,0,595,597,3,66,33,0,596,594,1,0,0,0,597,600,
        1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,65,1,0,0,0,600,598,1,
        0,0,0,601,604,3,68,34,0,602,603,5,90,0,0,603,605,3,70,35,0,604,602,
        1,0,0,0,604,605,1,0,0,0,605,67,1,0,0,0,606,611,3,0,0,0,607,608,5,
        74,0,0,608,610,5,75,0,0,609,607,1,0,0,0,610,613,1,0,0,0,611,609,
        1,0,0,0,611,612,1,0,0,0,612,69,1,0,0,0,613,611,1,0,0,0,614,617,3,
        162,81,0,615,617,3,208,104,0,616,614,1,0,0,0,616,615,1,0,0,0,617,
        71,1,0,0,0,618,619,3,114,57,0,619,620,3,0,0,0,620,625,3,78,39,0,
        621,622,5,74,0,0,622,624,5,75,0,0,623,621,1,0,0,0,624,627,1,0,0,
        0,625,623,1,0,0,0,625,626,1,0,0,0,626,630,1,0,0,0,627,625,1,0,0,
        0,628,629,5,45,0,0,629,631,3,214,107,0,630,628,1,0,0,0,630,631,1,
        0,0,0,631,632,1,0,0,0,632,633,3,84,42,0,633,73,1,0,0,0,634,640,3,
        10,5,0,635,636,3,0,0,0,636,637,5,69,0,0,637,639,1,0,0,0,638,635,
        1,0,0,0,639,642,1,0,0,0,640,638,1,0,0,0,640,641,1,0,0,0,641,643,
        1,0,0,0,642,640,1,0,0,0,643,644,5,43,0,0,644,75,1,0,0,0,645,650,
        3,80,40,0,646,647,5,68,0,0,647,649,3,80,40,0,648,646,1,0,0,0,649,
        652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,655,1,0,0,0,652,
        650,1,0,0,0,653,654,5,68,0,0,654,656,3,216,108,0,655,653,1,0,0,0,
        655,656,1,0,0,0,656,659,1,0,0,0,657,659,3,216,108,0,658,645,1,0,
        0,0,658,657,1,0,0,0,659,77,1,0,0,0,660,672,5,70,0,0,661,663,3,74,
        37,0,662,661,1,0,0,0,662,663,1,0,0,0,663,673,1,0,0,0,664,667,3,74,
        37,0,665,666,5,68,0,0,666,668,3,76,38,0,667,665,1,0,0,0,667,668,
        1,0,0,0,668,673,1,0,0,0,669,671,3,76,38,0,670,669,1,0,0,0,670,671,
        1,0,0,0,671,673,1,0,0,0,672,662,1,0,0,0,672,664,1,0,0,0,672,670,
        1,0,0,0,673,674,1,0,0,0,674,675,5,71,0,0,675,79,1,0,0,0,676,678,
        3,82,41,0,677,676,1,0,0,0,678,681,1,0,0,0,679,677,1,0,0,0,679,680,
        1,0,0,0,680,682,1,0,0,0,681,679,1,0,0,0,682,683,3,10,5,0,683,684,
        3,68,34,0,684,81,1,0,0,0,685,688,5,18,0,0,686,688,3,138,69,0,687,
        685,1,0,0,0,687,686,1,0,0,0,688,83,1,0,0,0,689,692,3,164,82,0,690,
        692,5,67,0,0,691,689,1,0,0,0,691,690,1,0,0,0,692,85,1,0,0,0,693,
        694,3,54,27,0,694,695,3,88,44,0,695,87,1,0,0,0,696,697,3,0,0,0,697,
        700,3,78,39,0,698,699,5,45,0,0,699,701,3,214,107,0,700,698,1,0,0,
        0,700,701,1,0,0,0,701,702,1,0,0,0,702,703,3,164,82,0,703,89,1,0,
        0,0,704,705,5,16,0,0,705,708,3,0,0,0,706,707,5,24,0,0,707,709,3,
        8,4,0,708,706,1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,712,5,
        72,0,0,711,713,3,92,46,0,712,711,1,0,0,0,712,713,1,0,0,0,713,715,
        1,0,0,0,714,716,5,68,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,718,
        1,0,0,0,717,719,3,96,48,0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,
        1,0,0,0,720,721,5,73,0,0,721,91,1,0,0,0,722,727,3,94,47,0,723,724,
        5,68,0,0,724,726,3,94,47,0,725,723,1,0,0,0,726,729,1,0,0,0,727,725,
        1,0,0,0,727,728,1,0,0,0,728,93,1,0,0,0,729,727,1,0,0,0,730,732,3,
        138,69,0,731,730,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,
        1,0,0,0,734,736,1,0,0,0,735,733,1,0,0,0,736,738,3,0,0,0,737,739,
        3,26,13,0,738,737,1,0,0,0,738,739,1,0,0,0,739,741,1,0,0,0,740,742,
        3,56,28,0,741,740,1,0,0,0,741,742,1,0,0,0,742,95,1,0,0,0,743,747,
        5,67,0,0,744,746,3,58,29,0,745,744,1,0,0,0,746,749,1,0,0,0,747,745,
        1,0,0,0,747,748,1,0,0,0,748,97,1,0,0,0,749,747,1,0,0,0,750,751,5,
        63,0,0,751,753,3,0,0,0,752,754,3,54,27,0,753,752,1,0,0,0,753,754,
        1,0,0,0,754,755,1,0,0,0,755,758,3,100,50,0,756,757,5,24,0,0,757,
        759,3,8,4,0,758,756,1,0,0,0,758,759,1,0,0,0,759,760,1,0,0,0,760,
        761,3,106,53,0,761,99,1,0,0,0,762,764,5,70,0,0,763,765,3,102,51,
        0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,767,5,71,0,
        0,767,101,1,0,0,0,768,773,3,104,52,0,769,770,5,68,0,0,770,772,3,
        104,52,0,771,769,1,0,0,0,772,775,1,0,0,0,773,771,1,0,0,0,773,774,
        1,0,0,0,774,103,1,0,0,0,775,773,1,0,0,0,776,777,3,10,5,0,777,778,
        3,0,0,0,778,105,1,0,0,0,779,784,5,72,0,0,780,783,3,58,29,0,781,783,
        3,108,54,0,782,780,1,0,0,0,782,781,1,0,0,0,783,786,1,0,0,0,784,782,
        1,0,0,0,784,785,1,0,0,0,785,787,1,0,0,0,786,784,1,0,0,0,787,788,
        5,73,0,0,788,107,1,0,0,0,789,791,3,46,23,0,790,789,1,0,0,0,791,794,
        1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,0,794,792,
        1,0,0,0,795,796,3,0,0,0,796,797,3,164,82,0,797,109,1,0,0,0,798,799,
        5,28,0,0,799,801,3,0,0,0,800,802,3,54,27,0,801,800,1,0,0,0,801,802,
        1,0,0,0,802,805,1,0,0,0,803,804,5,17,0,0,804,806,3,8,4,0,805,803,
        1,0,0,0,805,806,1,0,0,0,806,809,1,0,0,0,807,808,5,65,0,0,808,810,
        3,8,4,0,809,807,1,0,0,0,809,810,1,0,0,0,810,811,1,0,0,0,811,812,
        3,112,56,0,812,111,1,0,0,0,813,817,5,72,0,0,814,816,3,118,59,0,815,
        814,1,0,0,0,816,819,1,0,0,0,817,815,1,0,0,0,817,818,1,0,0,0,818,
        820,1,0,0,0,819,817,1,0,0,0,820,821,5,73,0,0,821,113,1,0,0,0,822,
        825,3,10,5,0,823,825,5,48,0,0,824,822,1,0,0,0,824,823,1,0,0,0,825,
        115,1,0,0,0,826,827,3,54,27,0,827,828,3,72,36,0,828,117,1,0,0,0,
        829,831,3,46,23,0,830,829,1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,
        0,832,833,1,0,0,0,833,835,1,0,0,0,834,832,1,0,0,0,835,838,3,120,
        60,0,836,838,5,67,0,0,837,832,1,0,0,0,837,836,1,0,0,0,838,119,1,
        0,0,0,839,848,3,122,61,0,840,848,3,126,63,0,841,848,3,130,65,0,842,
        848,3,110,55,0,843,848,3,148,74,0,844,848,3,52,26,0,845,848,3,90,
        45,0,846,848,3,98,49,0,847,839,1,0,0,0,847,840,1,0,0,0,847,841,1,
        0,0,0,847,842,1,0,0,0,847,843,1,0,0,0,847,844,1,0,0,0,847,845,1,
        0,0,0,847,846,1,0,0,0,848,121,1,0,0,0,849,850,3,10,5,0,850,855,3,
        124,62,0,851,852,5,68,0,0,852,854,3,124,62,0,853,851,1,0,0,0,854,
        857,1,0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,858,1,0,0,0,857,
        855,1,0,0,0,858,859,5,67,0,0,859,123,1,0,0,0,860,865,3,0,0,0,861,
        862,5,74,0,0,862,864,5,75,0,0,863,861,1,0,0,0,864,867,1,0,0,0,865,
        863,1,0,0,0,865,866,1,0,0,0,866,868,1,0,0,0,867,865,1,0,0,0,868,
        869,5,90,0,0,869,870,3,70,35,0,870,125,1,0,0,0,871,873,3,128,64,
        0,872,871,1,0,0,0,873,876,1,0,0,0,874,872,1,0,0,0,874,875,1,0,0,
        0,875,877,1,0,0,0,876,874,1,0,0,0,877,878,3,132,66,0,878,127,1,0,
        0,0,879,886,3,138,69,0,880,886,5,35,0,0,881,886,5,1,0,0,882,886,
        5,12,0,0,883,886,5,38,0,0,884,886,5,39,0,0,885,879,1,0,0,0,885,880,
        1,0,0,0,885,881,1,0,0,0,885,882,1,0,0,0,885,883,1,0,0,0,885,884,
        1,0,0,0,886,129,1,0,0,0,887,889,3,128,64,0,888,887,1,0,0,0,889,892,
        1,0,0,0,890,888,1,0,0,0,890,891,1,0,0,0,891,893,1,0,0,0,892,890,
        1,0,0,0,893,894,3,54,27,0,894,895,3,132,66,0,895,131,1,0,0,0,896,
        898,3,138,69,0,897,896,1,0,0,0,898,901,1,0,0,0,899,897,1,0,0,0,899,
        900,1,0,0,0,900,902,1,0,0,0,901,899,1,0,0,0,902,903,3,114,57,0,903,
        904,3,0,0,0,904,909,3,78,39,0,905,906,5,74,0,0,906,908,5,75,0,0,
        907,905,1,0,0,0,908,911,1,0,0,0,909,907,1,0,0,0,909,910,1,0,0,0,
        910,914,1,0,0,0,911,909,1,0,0,0,912,913,5,45,0,0,913,915,3,214,107,
        0,914,912,1,0,0,0,914,915,1,0,0,0,915,916,1,0,0,0,916,917,3,84,42,
        0,917,133,1,0,0,0,918,919,5,12,0,0,919,920,3,144,72,0,920,135,1,
        0,0,0,921,922,3,0,0,0,922,923,5,69,0,0,923,925,1,0,0,0,924,921,1,
        0,0,0,925,928,1,0,0,0,926,924,1,0,0,0,926,927,1,0,0,0,927,929,1,
        0,0,0,928,926,1,0,0,0,929,930,5,126,0,0,930,931,3,0,0,0,931,137,
        1,0,0,0,932,933,5,126,0,0,933,936,3,218,109,0,934,936,3,136,68,0,
        935,932,1,0,0,0,935,934,1,0,0,0,936,943,1,0,0,0,937,940,5,70,0,0,
        938,941,3,140,70,0,939,941,3,144,72,0,940,938,1,0,0,0,940,939,1,
        0,0,0,940,941,1,0,0,0,941,942,1,0,0,0,942,944,5,71,0,0,943,937,1,
        0,0,0,943,944,1,0,0,0,944,139,1,0,0,0,945,950,3,142,71,0,946,947,
        5,68,0,0,947,949,3,142,71,0,948,946,1,0,0,0,949,952,1,0,0,0,950,
        948,1,0,0,0,950,951,1,0,0,0,951,141,1,0,0,0,952,950,1,0,0,0,953,
        954,3,0,0,0,954,955,5,90,0,0,955,956,3,144,72,0,956,143,1,0,0,0,
        957,961,3,208,104,0,958,961,3,138,69,0,959,961,3,146,73,0,960,957,
        1,0,0,0,960,958,1,0,0,0,960,959,1,0,0,0,961,145,1,0,0,0,962,971,
        5,72,0,0,963,968,3,144,72,0,964,965,5,68,0,0,965,967,3,144,72,0,
        966,964,1,0,0,0,967,970,1,0,0,0,968,966,1,0,0,0,968,969,1,0,0,0,
        969,972,1,0,0,0,970,968,1,0,0,0,971,963,1,0,0,0,971,972,1,0,0,0,
        972,974,1,0,0,0,973,975,5,68,0,0,974,973,1,0,0,0,974,975,1,0,0,0,
        975,976,1,0,0,0,976,977,5,73,0,0,977,147,1,0,0,0,978,979,5,126,0,
        0,979,980,5,28,0,0,980,981,3,0,0,0,981,982,3,150,75,0,982,149,1,
        0,0,0,983,987,5,72,0,0,984,986,3,152,76,0,985,984,1,0,0,0,986,989,
        1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,0,988,990,1,0,0,0,989,987,
        1,0,0,0,990,991,5,73,0,0,991,151,1,0,0,0,992,994,3,46,23,0,993,992,
        1,0,0,0,994,997,1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,0,996,998,
        1,0,0,0,997,995,1,0,0,0,998,1001,3,154,77,0,999,1001,5,67,0,0,1000,
        995,1,0,0,0,1000,999,1,0,0,0,1001,153,1,0,0,0,1002,1003,3,10,5,0,
        1003,1004,3,156,78,0,1004,1005,5,67,0,0,1005,1027,1,0,0,0,1006,1008,
        3,52,26,0,1007,1009,5,67,0,0,1008,1007,1,0,0,0,1008,1009,1,0,0,0,
        1009,1027,1,0,0,0,1010,1012,3,110,55,0,1011,1013,5,67,0,0,1012,1011,
        1,0,0,0,1012,1013,1,0,0,0,1013,1027,1,0,0,0,1014,1016,3,90,45,0,
        1015,1017,5,67,0,0,1016,1015,1,0,0,0,1016,1017,1,0,0,0,1017,1027,
        1,0,0,0,1018,1020,3,148,74,0,1019,1021,5,67,0,0,1020,1019,1,0,0,
        0,1020,1021,1,0,0,0,1021,1027,1,0,0,0,1022,1024,3,98,49,0,1023,1025,
        5,67,0,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,
        1002,1,0,0,0,1026,1006,1,0,0,0,1026,1010,1,0,0,0,1026,1014,1,0,0,
        0,1026,1018,1,0,0,0,1026,1022,1,0,0,0,1027,155,1,0,0,0,1028,1031,
        3,158,79,0,1029,1031,3,160,80,0,1030,1028,1,0,0,0,1030,1029,1,0,
        0,0,1031,157,1,0,0,0,1032,1033,3,0,0,0,1033,1034,5,70,0,0,1034,1036,
        5,71,0,0,1035,1037,3,134,67,0,1036,1035,1,0,0,0,1036,1037,1,0,0,
        0,1037,159,1,0,0,0,1038,1039,3,64,32,0,1039,161,1,0,0,0,1040,1052,
        5,72,0,0,1041,1046,3,70,35,0,1042,1043,5,68,0,0,1043,1045,3,70,35,
        0,1044,1042,1,0,0,0,1045,1048,1,0,0,0,1046,1044,1,0,0,0,1046,1047,
        1,0,0,0,1047,1050,1,0,0,0,1048,1046,1,0,0,0,1049,1051,5,68,0,0,1050,
        1049,1,0,0,0,1050,1051,1,0,0,0,1051,1053,1,0,0,0,1052,1041,1,0,0,
        0,1052,1053,1,0,0,0,1053,1054,1,0,0,0,1054,1055,5,73,0,0,1055,163,
        1,0,0,0,1056,1060,5,72,0,0,1057,1059,3,166,83,0,1058,1057,1,0,0,
        0,1059,1062,1,0,0,0,1060,1058,1,0,0,0,1060,1061,1,0,0,0,1061,1063,
        1,0,0,0,1062,1060,1,0,0,0,1063,1064,5,73,0,0,1064,165,1,0,0,0,1065,
        1066,3,168,84,0,1066,1067,5,67,0,0,1067,1071,1,0,0,0,1068,1071,3,
        220,110,0,1069,1071,3,170,85,0,1070,1065,1,0,0,0,1070,1068,1,0,0,
        0,1070,1069,1,0,0,0,1071,167,1,0,0,0,1072,1074,3,82,41,0,1073,1072,
        1,0,0,0,1074,1077,1,0,0,0,1075,1073,1,0,0,0,1075,1076,1,0,0,0,1076,
        1086,1,0,0,0,1077,1075,1,0,0,0,1078,1079,5,61,0,0,1079,1080,3,0,
        0,0,1080,1081,5,90,0,0,1081,1082,3,208,104,0,1082,1087,1,0,0,0,1083,
        1084,3,10,5,0,1084,1085,3,64,32,0,1085,1087,1,0,0,0,1086,1078,1,
        0,0,0,1086,1083,1,0,0,0,1087,169,1,0,0,0,1088,1202,3,164,82,0,1089,
        1090,5,2,0,0,1090,1093,3,208,104,0,1091,1092,5,96,0,0,1092,1094,
        3,208,104,0,1093,1091,1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,0,0,
        0,1095,1096,5,67,0,0,1096,1202,1,0,0,0,1097,1098,5,22,0,0,1098,1099,
        3,222,111,0,1099,1102,3,170,85,0,1100,1101,5,15,0,0,1101,1103,3,
        170,85,0,1102,1100,1,0,0,0,1102,1103,1,0,0,0,1103,1202,1,0,0,0,1104,
        1105,5,21,0,0,1105,1106,5,70,0,0,1106,1107,3,180,90,0,1107,1108,
        5,71,0,0,1108,1109,3,170,85,0,1109,1202,1,0,0,0,1110,1111,5,50,0,
        0,1111,1112,3,222,111,0,1112,1113,3,170,85,0,1113,1202,1,0,0,0,1114,
        1115,5,13,0,0,1115,1116,3,170,85,0,1116,1117,5,50,0,0,1117,1118,
        3,222,111,0,1118,1119,5,67,0,0,1119,1202,1,0,0,0,1120,1121,5,47,
        0,0,1121,1131,3,164,82,0,1122,1124,3,184,92,0,1123,1122,1,0,0,0,
        1124,1125,1,0,0,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,1128,
        1,0,0,0,1127,1129,3,188,94,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,
        1129,1132,1,0,0,0,1130,1132,3,188,94,0,1131,1123,1,0,0,0,1131,1130,
        1,0,0,0,1132,1202,1,0,0,0,1133,1134,5,47,0,0,1134,1135,3,190,95,
        0,1135,1139,3,164,82,0,1136,1138,3,184,92,0,1137,1136,1,0,0,0,1138,
        1141,1,0,0,0,1139,1137,1,0,0,0,1139,1140,1,0,0,0,1140,1143,1,0,0,
        0,1141,1139,1,0,0,0,1142,1144,3,188,94,0,1143,1142,1,0,0,0,1143,
        1144,1,0,0,0,1144,1202,1,0,0,0,1145,1146,5,41,0,0,1146,1147,3,222,
        111,0,1147,1151,5,72,0,0,1148,1150,3,174,87,0,1149,1148,1,0,0,0,
        1150,1153,1,0,0,0,1151,1149,1,0,0,0,1151,1152,1,0,0,0,1152,1157,
        1,0,0,0,1153,1151,1,0,0,0,1154,1156,3,176,88,0,1155,1154,1,0,0,0,
        1156,1159,1,0,0,0,1157,1155,1,0,0,0,1157,1158,1,0,0,0,1158,1160,
        1,0,0,0,1159,1157,1,0,0,0,1160,1161,5,73,0,0,1161,1202,1,0,0,0,1162,
        1163,5,42,0,0,1163,1164,3,222,111,0,1164,1165,3,164,82,0,1165,1202,
        1,0,0,0,1166,1168,5,36,0,0,1167,1169,3,208,104,0,1168,1167,1,0,0,
        0,1168,1169,1,0,0,0,1169,1170,1,0,0,0,1170,1202,5,67,0,0,1171,1172,
        5,44,0,0,1172,1173,3,208,104,0,1173,1174,5,67,0,0,1174,1202,1,0,
        0,0,1175,1177,5,4,0,0,1176,1178,3,0,0,0,1177,1176,1,0,0,0,1177,1178,
        1,0,0,0,1178,1179,1,0,0,0,1179,1202,5,67,0,0,1180,1182,5,11,0,0,
        1181,1183,3,0,0,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1184,
        1,0,0,0,1184,1202,5,67,0,0,1185,1186,5,62,0,0,1186,1187,3,208,104,
        0,1187,1188,5,67,0,0,1188,1202,1,0,0,0,1189,1202,5,67,0,0,1190,1191,
        3,208,104,0,1191,1192,5,67,0,0,1192,1202,1,0,0,0,1193,1195,3,210,
        105,0,1194,1196,5,67,0,0,1195,1194,1,0,0,0,1195,1196,1,0,0,0,1196,
        1202,1,0,0,0,1197,1198,3,0,0,0,1198,1199,5,96,0,0,1199,1200,3,170,
        85,0,1200,1202,1,0,0,0,1201,1088,1,0,0,0,1201,1089,1,0,0,0,1201,
        1097,1,0,0,0,1201,1104,1,0,0,0,1201,1110,1,0,0,0,1201,1114,1,0,0,
        0,1201,1120,1,0,0,0,1201,1133,1,0,0,0,1201,1145,1,0,0,0,1201,1162,
        1,0,0,0,1201,1166,1,0,0,0,1201,1171,1,0,0,0,1201,1175,1,0,0,0,1201,
        1180,1,0,0,0,1201,1185,1,0,0,0,1201,1189,1,0,0,0,1201,1190,1,0,0,
        0,1201,1193,1,0,0,0,1201,1197,1,0,0,0,1202,171,1,0,0,0,1203,1211,
        3,164,82,0,1204,1206,3,166,83,0,1205,1204,1,0,0,0,1206,1209,1,0,
        0,0,1207,1205,1,0,0,0,1207,1208,1,0,0,0,1208,1211,1,0,0,0,1209,1207,
        1,0,0,0,1210,1203,1,0,0,0,1210,1207,1,0,0,0,1211,173,1,0,0,0,1212,
        1214,3,176,88,0,1213,1212,1,0,0,0,1214,1215,1,0,0,0,1215,1213,1,
        0,0,0,1215,1216,1,0,0,0,1216,1218,1,0,0,0,1217,1219,3,166,83,0,1218,
        1217,1,0,0,0,1219,1220,1,0,0,0,1220,1218,1,0,0,0,1220,1221,1,0,0,
        0,1221,175,1,0,0,0,1222,1228,5,6,0,0,1223,1229,3,208,104,0,1224,
        1229,5,128,0,0,1225,1226,3,10,5,0,1226,1227,3,0,0,0,1227,1229,1,
        0,0,0,1228,1223,1,0,0,0,1228,1224,1,0,0,0,1228,1225,1,0,0,0,1229,
        1230,1,0,0,0,1230,1234,5,96,0,0,1231,1232,5,12,0,0,1232,1234,5,96,
        0,0,1233,1222,1,0,0,0,1233,1231,1,0,0,0,1234,177,1,0,0,0,1235,1238,
        3,168,84,0,1236,1238,3,224,112,0,1237,1235,1,0,0,0,1237,1236,1,0,
        0,0,1238,179,1,0,0,0,1239,1252,3,182,91,0,1240,1242,3,178,89,0,1241,
        1240,1,0,0,0,1241,1242,1,0,0,0,1242,1243,1,0,0,0,1243,1245,5,67,
        0,0,1244,1246,3,208,104,0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,
        1247,1,0,0,0,1247,1249,5,67,0,0,1248,1250,3,224,112,0,1249,1248,
        1,0,0,0,1249,1250,1,0,0,0,1250,1252,1,0,0,0,1251,1239,1,0,0,0,1251,
        1241,1,0,0,0,1252,181,1,0,0,0,1253,1255,3,82,41,0,1254,1253,1,0,
        0,0,1255,1258,1,0,0,0,1256,1254,1,0,0,0,1256,1257,1,0,0,0,1257,1261,
        1,0,0,0,1258,1256,1,0,0,0,1259,1262,3,10,5,0,1260,1262,5,61,0,0,
        1261,1259,1,0,0,0,1261,1260,1,0,0,0,1262,1263,1,0,0,0,1263,1264,
        3,68,34,0,1264,1265,5,96,0,0,1265,1266,3,208,104,0,1266,183,1,0,
        0,0,1267,1268,5,7,0,0,1268,1272,5,70,0,0,1269,1271,3,82,41,0,1270,
        1269,1,0,0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,1272,1273,1,0,0,
        0,1273,1275,1,0,0,0,1274,1272,1,0,0,0,1275,1276,3,186,93,0,1276,
        1277,3,0,0,0,1277,1278,5,71,0,0,1278,1279,3,164,82,0,1279,185,1,
        0,0,0,1280,1285,3,218,109,0,1281,1282,5,110,0,0,1282,1284,3,218,
        109,0,1283,1281,1,0,0,0,1284,1287,1,0,0,0,1285,1283,1,0,0,0,1285,
        1286,1,0,0,0,1286,187,1,0,0,0,1287,1285,1,0,0,0,1288,1289,5,19,0,
        0,1289,1290,3,164,82,0,1290,189,1,0,0,0,1291,1292,5,70,0,0,1292,
        1294,3,192,96,0,1293,1295,5,67,0,0,1294,1293,1,0,0,0,1294,1295,1,
        0,0,0,1295,1296,1,0,0,0,1296,1297,5,71,0,0,1297,191,1,0,0,0,1298,
        1303,3,194,97,0,1299,1300,5,67,0,0,1300,1302,3,194,97,0,1301,1299,
        1,0,0,0,1302,1305,1,0,0,0,1303,1301,1,0,0,0,1303,1304,1,0,0,0,1304,
        193,1,0,0,0,1305,1303,1,0,0,0,1306,1308,3,82,41,0,1307,1306,1,0,
        0,0,1308,1311,1,0,0,0,1309,1307,1,0,0,0,1309,1310,1,0,0,0,1310,1317,
        1,0,0,0,1311,1309,1,0,0,0,1312,1313,3,28,14,0,1313,1314,3,68,34,
        0,1314,1318,1,0,0,0,1315,1316,5,61,0,0,1316,1318,3,0,0,0,1317,1312,
        1,0,0,0,1317,1315,1,0,0,0,1318,1319,1,0,0,0,1319,1320,5,90,0,0,1320,
        1321,3,208,104,0,1321,1324,1,0,0,0,1322,1324,3,0,0,0,1323,1309,1,
        0,0,0,1323,1322,1,0,0,0,1324,195,1,0,0,0,1325,1327,3,82,41,0,1326,
        1325,1,0,0,0,1327,1330,1,0,0,0,1328,1326,1,0,0,0,1328,1329,1,0,0,
        0,1329,1331,1,0,0,0,1330,1328,1,0,0,0,1331,1335,3,10,5,0,1332,1334,
        3,138,69,0,1333,1332,1,0,0,0,1334,1337,1,0,0,0,1335,1333,1,0,0,0,
        1335,1336,1,0,0,0,1336,1338,1,0,0,0,1337,1335,1,0,0,0,1338,1339,
        3,0,0,0,1339,197,1,0,0,0,1340,1341,5,70,0,0,1341,1342,3,208,104,
        0,1342,1343,5,71,0,0,1343,1359,1,0,0,0,1344,1359,5,43,0,0,1345,1359,
        5,40,0,0,1346,1359,3,200,100,0,1347,1359,3,0,0,0,1348,1349,3,114,
        57,0,1349,1350,5,69,0,0,1350,1351,5,9,0,0,1351,1359,1,0,0,0,1352,
        1356,3,6,3,0,1353,1357,3,24,12,0,1354,1355,5,43,0,0,1355,1357,3,
        26,13,0,1356,1353,1,0,0,0,1356,1354,1,0,0,0,1357,1359,1,0,0,0,1358,
        1340,1,0,0,0,1358,1344,1,0,0,0,1358,1345,1,0,0,0,1358,1346,1,0,0,
        0,1358,1347,1,0,0,0,1358,1348,1,0,0,0,1358,1352,1,0,0,0,1359,199,
        1,0,0,0,1360,1368,3,202,101,0,1361,1368,3,204,102,0,1362,1368,5,
        83,0,0,1363,1368,5,84,0,0,1364,1368,5,82,0,0,1365,1368,5,86,0,0,
        1366,1368,5,85,0,0,1367,1360,1,0,0,0,1367,1361,1,0,0,0,1367,1362,
        1,0,0,0,1367,1363,1,0,0,0,1367,1364,1,0,0,0,1367,1365,1,0,0,0,1367,
        1366,1,0,0,0,1368,201,1,0,0,0,1369,1370,7,5,0,0,1370,203,1,0,0,0,
        1371,1372,7,6,0,0,1372,205,1,0,0,0,1373,1374,5,92,0,0,1374,1377,
        5,91,0,0,1375,1377,3,20,10,0,1376,1373,1,0,0,0,1376,1375,1,0,0,0,
        1377,207,1,0,0,0,1378,1379,6,104,-1,0,1379,1423,3,198,99,0,1380,
        1423,3,226,113,0,1381,1382,5,31,0,0,1382,1423,3,230,115,0,1383,1387,
        5,70,0,0,1384,1386,3,138,69,0,1385,1384,1,0,0,0,1386,1389,1,0,0,
        0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,1390,1,0,0,0,1389,1387,
        1,0,0,0,1390,1395,3,10,5,0,1391,1392,5,109,0,0,1392,1394,3,10,5,
        0,1393,1391,1,0,0,0,1394,1397,1,0,0,0,1395,1393,1,0,0,0,1395,1396,
        1,0,0,0,1396,1398,1,0,0,0,1397,1395,1,0,0,0,1398,1399,5,71,0,0,1399,
        1400,3,208,104,21,1400,1423,1,0,0,0,1401,1402,7,7,0,0,1402,1423,
        3,208,104,19,1403,1404,7,8,0,0,1404,1423,3,208,104,18,1405,1423,
        3,210,105,0,1406,1407,3,10,5,0,1407,1413,5,125,0,0,1408,1410,3,20,
        10,0,1409,1408,1,0,0,0,1409,1410,1,0,0,0,1410,1411,1,0,0,0,1411,
        1414,3,0,0,0,1412,1414,5,31,0,0,1413,1409,1,0,0,0,1413,1412,1,0,
        0,0,1414,1423,1,0,0,0,1415,1416,3,30,15,0,1416,1418,5,125,0,0,1417,
        1419,3,20,10,0,1418,1417,1,0,0,0,1418,1419,1,0,0,0,1419,1420,1,0,
        0,0,1420,1421,5,31,0,0,1421,1423,1,0,0,0,1422,1378,1,0,0,0,1422,
        1380,1,0,0,0,1422,1381,1,0,0,0,1422,1383,1,0,0,0,1422,1401,1,0,0,
        0,1422,1403,1,0,0,0,1422,1405,1,0,0,0,1422,1406,1,0,0,0,1422,1415,
        1,0,0,0,1423,1507,1,0,0,0,1424,1425,10,17,0,0,1425,1426,7,9,0,0,
        1426,1506,3,208,104,18,1427,1428,10,16,0,0,1428,1429,7,10,0,0,1429,
        1506,3,208,104,17,1430,1438,10,15,0,0,1431,1432,5,92,0,0,1432,1439,
        5,92,0,0,1433,1434,5,91,0,0,1434,1435,5,91,0,0,1435,1439,5,91,0,
        0,1436,1437,5,91,0,0,1437,1439,5,91,0,0,1438,1431,1,0,0,0,1438,1433,
        1,0,0,0,1438,1436,1,0,0,0,1439,1440,1,0,0,0,1440,1506,3,208,104,
        16,1441,1442,10,14,0,0,1442,1443,7,11,0,0,1443,1506,3,208,104,15,
        1444,1445,10,12,0,0,1445,1446,7,12,0,0,1446,1506,3,208,104,13,1447,
        1448,10,11,0,0,1448,1449,5,109,0,0,1449,1506,3,208,104,12,1450,1451,
        10,10,0,0,1451,1452,5,111,0,0,1452,1506,3,208,104,11,1453,1454,10,
        9,0,0,1454,1455,5,110,0,0,1455,1506,3,208,104,10,1456,1457,10,8,
        0,0,1457,1458,5,101,0,0,1458,1506,3,208,104,9,1459,1460,10,7,0,0,
        1460,1461,5,102,0,0,1461,1506,3,208,104,8,1462,1463,10,6,0,0,1463,
        1464,5,95,0,0,1464,1465,3,208,104,0,1465,1466,5,96,0,0,1466,1467,
        3,208,104,6,1467,1506,1,0,0,0,1468,1469,10,5,0,0,1469,1470,7,13,
        0,0,1470,1506,3,208,104,5,1471,1472,10,25,0,0,1472,1484,5,69,0,0,
        1473,1485,3,0,0,0,1474,1485,3,226,113,0,1475,1485,5,43,0,0,1476,
        1478,5,31,0,0,1477,1479,3,6,3,0,1478,1477,1,0,0,0,1478,1479,1,0,
        0,0,1479,1480,1,0,0,0,1480,1485,3,234,117,0,1481,1482,5,40,0,0,1482,
        1485,3,22,11,0,1483,1485,3,240,120,0,1484,1473,1,0,0,0,1484,1474,
        1,0,0,0,1484,1475,1,0,0,0,1484,1476,1,0,0,0,1484,1481,1,0,0,0,1484,
        1483,1,0,0,0,1485,1506,1,0,0,0,1486,1487,10,24,0,0,1487,1488,5,74,
        0,0,1488,1489,3,208,104,0,1489,1490,5,75,0,0,1490,1506,1,0,0,0,1491,
        1492,10,20,0,0,1492,1506,7,14,0,0,1493,1494,10,13,0,0,1494,1497,
        5,26,0,0,1495,1498,3,10,5,0,1496,1498,3,196,98,0,1497,1495,1,0,0,
        0,1497,1496,1,0,0,0,1498,1506,1,0,0,0,1499,1500,10,3,0,0,1500,1502,
        5,125,0,0,1501,1503,3,20,10,0,1502,1501,1,0,0,0,1502,1503,1,0,0,
        0,1503,1504,1,0,0,0,1504,1506,3,0,0,0,1505,1424,1,0,0,0,1505,1427,
        1,0,0,0,1505,1430,1,0,0,0,1505,1441,1,0,0,0,1505,1444,1,0,0,0,1505,
        1447,1,0,0,0,1505,1450,1,0,0,0,1505,1453,1,0,0,0,1505,1456,1,0,0,
        0,1505,1459,1,0,0,0,1505,1462,1,0,0,0,1505,1468,1,0,0,0,1505,1471,
        1,0,0,0,1505,1486,1,0,0,0,1505,1491,1,0,0,0,1505,1493,1,0,0,0,1505,
        1499,1,0,0,0,1506,1509,1,0,0,0,1507,1505,1,0,0,0,1507,1508,1,0,0,
        0,1508,209,1,0,0,0,1509,1507,1,0,0,0,1510,1511,5,41,0,0,1511,1512,
        3,222,111,0,1512,1516,5,72,0,0,1513,1515,3,212,106,0,1514,1513,1,
        0,0,0,1515,1518,1,0,0,0,1516,1514,1,0,0,0,1516,1517,1,0,0,0,1517,
        1519,1,0,0,0,1518,1516,1,0,0,0,1519,1520,5,73,0,0,1520,211,1,0,0,
        0,1521,1525,5,6,0,0,1522,1526,3,224,112,0,1523,1526,5,86,0,0,1524,
        1526,3,228,114,0,1525,1522,1,0,0,0,1525,1523,1,0,0,0,1525,1524,1,
        0,0,0,1526,1527,1,0,0,0,1527,1528,7,15,0,0,1528,1533,3,172,86,0,
        1529,1530,5,12,0,0,1530,1531,7,15,0,0,1531,1533,3,172,86,0,1532,
        1521,1,0,0,0,1532,1529,1,0,0,0,1533,213,1,0,0,0,1534,1539,3,218,
        109,0,1535,1536,5,68,0,0,1536,1538,3,218,109,0,1537,1535,1,0,0,0,
        1538,1541,1,0,0,0,1539,1537,1,0,0,0,1539,1540,1,0,0,0,1540,215,1,
        0,0,0,1541,1539,1,0,0,0,1542,1544,3,82,41,0,1543,1542,1,0,0,0,1544,
        1547,1,0,0,0,1545,1543,1,0,0,0,1545,1546,1,0,0,0,1546,1548,1,0,0,
        0,1547,1545,1,0,0,0,1548,1552,3,10,5,0,1549,1551,3,138,69,0,1550,
        1549,1,0,0,0,1551,1554,1,0,0,0,1552,1550,1,0,0,0,1552,1553,1,0,0,
        0,1553,1555,1,0,0,0,1554,1552,1,0,0,0,1555,1556,5,127,0,0,1556,1557,
        3,68,34,0,1557,217,1,0,0,0,1558,1563,3,0,0,0,1559,1560,5,69,0,0,
        1560,1562,3,0,0,0,1561,1559,1,0,0,0,1562,1565,1,0,0,0,1563,1561,
        1,0,0,0,1563,1564,1,0,0,0,1564,219,1,0,0,0,1565,1563,1,0,0,0,1566,
        1568,3,50,25,0,1567,1566,1,0,0,0,1568,1571,1,0,0,0,1569,1567,1,0,
        0,0,1569,1570,1,0,0,0,1570,1575,1,0,0,0,1571,1569,1,0,0,0,1572,1576,
        3,52,26,0,1573,1576,3,110,55,0,1574,1576,3,98,49,0,1575,1572,1,0,
        0,0,1575,1573,1,0,0,0,1575,1574,1,0,0,0,1576,221,1,0,0,0,1577,1578,
        5,70,0,0,1578,1579,3,208,104,0,1579,1580,5,71,0,0,1580,223,1,0,0,
        0,1581,1586,3,208,104,0,1582,1583,5,68,0,0,1583,1585,3,208,104,0,
        1584,1582,1,0,0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,0,1586,1587,
        1,0,0,0,1587,225,1,0,0,0,1588,1586,1,0,0,0,1589,1590,3,0,0,0,1590,
        1592,5,70,0,0,1591,1593,3,224,112,0,1592,1591,1,0,0,0,1592,1593,
        1,0,0,0,1593,1594,1,0,0,0,1594,1595,5,71,0,0,1595,1609,1,0,0,0,1596,
        1597,5,43,0,0,1597,1599,5,70,0,0,1598,1600,3,224,112,0,1599,1598,
        1,0,0,0,1599,1600,1,0,0,0,1600,1601,1,0,0,0,1601,1609,5,71,0,0,1602,
        1603,5,40,0,0,1603,1605,5,70,0,0,1604,1606,3,224,112,0,1605,1604,
        1,0,0,0,1605,1606,1,0,0,0,1606,1607,1,0,0,0,1607,1609,5,71,0,0,1608,
        1589,1,0,0,0,1608,1596,1,0,0,0,1608,1602,1,0,0,0,1609,227,1,0,0,
        0,1610,1611,6,114,-1,0,1611,1612,5,70,0,0,1612,1613,3,228,114,0,
        1613,1614,5,71,0,0,1614,1637,1,0,0,0,1615,1617,3,82,41,0,1616,1615,
        1,0,0,0,1617,1620,1,0,0,0,1618,1616,1,0,0,0,1618,1619,1,0,0,0,1619,
        1621,1,0,0,0,1620,1618,1,0,0,0,1621,1625,3,10,5,0,1622,1624,3,138,
        69,0,1623,1622,1,0,0,0,1624,1627,1,0,0,0,1625,1623,1,0,0,0,1625,
        1626,1,0,0,0,1626,1628,1,0,0,0,1627,1625,1,0,0,0,1628,1633,3,0,0,
        0,1629,1630,5,101,0,0,1630,1632,3,208,104,0,1631,1629,1,0,0,0,1632,
        1635,1,0,0,0,1633,1631,1,0,0,0,1633,1634,1,0,0,0,1634,1637,1,0,0,
        0,1635,1633,1,0,0,0,1636,1610,1,0,0,0,1636,1618,1,0,0,0,1637,1643,
        1,0,0,0,1638,1639,10,1,0,0,1639,1640,5,101,0,0,1640,1642,3,208,104,
        0,1641,1638,1,0,0,0,1642,1645,1,0,0,0,1643,1641,1,0,0,0,1643,1644,
        1,0,0,0,1644,229,1,0,0,0,1645,1643,1,0,0,0,1646,1647,3,6,3,0,1647,
        1648,3,232,116,0,1648,1649,3,238,119,0,1649,1656,1,0,0,0,1650,1653,
        3,232,116,0,1651,1654,3,236,118,0,1652,1654,3,238,119,0,1653,1651,
        1,0,0,0,1653,1652,1,0,0,0,1654,1656,1,0,0,0,1655,1646,1,0,0,0,1655,
        1650,1,0,0,0,1656,231,1,0,0,0,1657,1659,3,0,0,0,1658,1660,3,206,
        103,0,1659,1658,1,0,0,0,1659,1660,1,0,0,0,1660,1668,1,0,0,0,1661,
        1662,5,69,0,0,1662,1664,3,0,0,0,1663,1665,3,206,103,0,1664,1663,
        1,0,0,0,1664,1665,1,0,0,0,1665,1667,1,0,0,0,1666,1661,1,0,0,0,1667,
        1670,1,0,0,0,1668,1666,1,0,0,0,1668,1669,1,0,0,0,1669,1673,1,0,0,
        0,1670,1668,1,0,0,0,1671,1673,3,12,6,0,1672,1657,1,0,0,0,1672,1671,
        1,0,0,0,1673,233,1,0,0,0,1674,1676,3,0,0,0,1675,1677,3,4,2,0,1676,
        1675,1,0,0,0,1676,1677,1,0,0,0,1677,1678,1,0,0,0,1678,1679,3,238,
        119,0,1679,235,1,0,0,0,1680,1708,5,74,0,0,1681,1686,5,75,0,0,1682,
        1683,5,74,0,0,1683,1685,5,75,0,0,1684,1682,1,0,0,0,1685,1688,1,0,
        0,0,1686,1684,1,0,0,0,1686,1687,1,0,0,0,1687,1689,1,0,0,0,1688,1686,
        1,0,0,0,1689,1709,3,162,81,0,1690,1691,3,208,104,0,1691,1698,5,75,
        0,0,1692,1693,5,74,0,0,1693,1694,3,208,104,0,1694,1695,5,75,0,0,
        1695,1697,1,0,0,0,1696,1692,1,0,0,0,1697,1700,1,0,0,0,1698,1696,
        1,0,0,0,1698,1699,1,0,0,0,1699,1705,1,0,0,0,1700,1698,1,0,0,0,1701,
        1702,5,74,0,0,1702,1704,5,75,0,0,1703,1701,1,0,0,0,1704,1707,1,0,
        0,0,1705,1703,1,0,0,0,1705,1706,1,0,0,0,1706,1709,1,0,0,0,1707,1705,
        1,0,0,0,1708,1681,1,0,0,0,1708,1690,1,0,0,0,1709,237,1,0,0,0,1710,
        1712,3,26,13,0,1711,1713,3,56,28,0,1712,1711,1,0,0,0,1712,1713,1,
        0,0,0,1713,239,1,0,0,0,1714,1715,3,6,3,0,1715,1716,3,24,12,0,1716,
        241,1,0,0,0,214,249,260,266,271,276,283,291,299,303,310,317,323,
        325,333,341,345,347,354,358,364,370,375,380,385,390,393,398,404,
        410,415,424,429,434,443,451,454,460,469,479,487,501,508,522,527,
        531,535,539,549,558,565,571,575,587,598,604,611,616,625,630,640,
        650,655,658,662,667,670,672,679,687,691,700,708,712,715,718,727,
        733,738,741,747,753,758,764,773,782,784,792,801,805,809,817,824,
        832,837,847,855,865,874,885,890,899,909,914,926,935,940,943,950,
        960,968,971,974,987,995,1000,1008,1012,1016,1020,1024,1026,1030,
        1036,1046,1050,1052,1060,1070,1075,1086,1093,1102,1125,1128,1131,
        1139,1143,1151,1157,1168,1177,1182,1195,1201,1207,1210,1215,1220,
        1228,1233,1237,1241,1245,1249,1251,1256,1261,1272,1285,1294,1303,
        1309,1317,1323,1328,1335,1356,1358,1367,1376,1387,1395,1409,1413,
        1418,1422,1438,1478,1484,1497,1502,1505,1507,1516,1525,1532,1539,
        1545,1552,1563,1569,1575,1586,1592,1599,1605,1608,1618,1625,1633,
        1636,1643,1653,1655,1659,1664,1668,1672,1676,1686,1698,1705,1708,
        1712
    ]

class JavaParser ( Parser ):

    grammarFileName = "JavaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'abstract'", "'assert'", "'boolean'", 
                     "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                     "'class'", "'const'", "'continue'", "'default'", "'do'", 
                     "'double'", "'else'", "'enum'", "'extends'", "'final'", 
                     "'finally'", "'float'", "'for'", "'if'", "'goto'", 
                     "'implements'", "'import'", "'instanceof'", "'int'", 
                     "'interface'", "'long'", "'native'", "'new'", "'package'", 
                     "'private'", "'protected'", "'public'", "'return'", 
                     "'short'", "'static'", "'strictfp'", "'super'", "'switch'", 
                     "'synchronized'", "'this'", "'throw'", "'throws'", 
                     "'transient'", "'try'", "'void'", "'volatile'", "'while'", 
                     "'module'", "'open'", "'requires'", "'exports'", "'opens'", 
                     "'to'", "'uses'", "'provides'", "'with'", "'transitive'", 
                     "'var'", "'yield'", "'record'", "'sealed'", "'permits'", 
                     "'non-sealed'", "';'", "','", "'.'", "'('", "')'", 
                     "'{'", "'}'", "'['", "']'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'null'", "<INVALID>", "<INVALID>", "<INVALID>", "'='", 
                     "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", 
                     "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
                     "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", 
                     "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
                     "'<<='", "'>>='", "'>>>='", "'->'", "'::'", "'@'", 
                     "'...'" ]

    symbolicNames = [ "<INVALID>", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
                      "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                      "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", 
                      "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", 
                      "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
                      "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", 
                      "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", 
                      "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", 
                      "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                      "WHILE", "MODULE", "OPEN", "REQUIRES", "EXPORTS", 
                      "OPENS", "TO", "USES", "PROVIDES", "WITH", "TRANSITIVE", 
                      "VAR", "YIELD", "RECORD", "SEALED", "PERMITS", "NON_SEALED", 
                      "SEMI", "COMMA", "DOT", "PAREN_S", "PAREN_E", "BLOCK_S", 
                      "BLOCK_E", "ARRAY_S", "ARRAY_E", "DECIMAL_LITERAL", 
                      "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", 
                      "HEX_FLOAT_LITERAL", "BOOL_LITERAL", "CHAR_LITERAL", 
                      "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", "WS", 
                      "COMMENT", "LINE_COMMENT", "ASSIGN", "GT", "LT", "LOG_NOT", 
                      "TILDE", "QUESTION", "COLON", "EQUAL", "LE", "GE", 
                      "NOTEQUAL", "LOG_AND", "LOG_OR", "UNN_INC", "UNN_DEC", 
                      "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", 
                      "MOD", "ADD_ASS", "SUB_ASS", "MUL_ASS", "DIV_ASS", 
                      "AND_ASS", "OR_ASS", "XOR_ASS", "MOD_ASS", "LSHIFT_ASS", 
                      "RSHIFT_ASS", "URSHIFT_ASS", "ARROW", "COLONCOLON", 
                      "AT", "ELLIPSIS", "IDENTIFIER" ]

    RULE_identifier = 0
    RULE_type_identifier = 1
    RULE_non_wild_card_type_arguments_or_diamond = 2
    RULE_non_wildcard_type_arguments = 3
    RULE_type_list = 4
    RULE_type_type = 5
    RULE_primitive_type = 6
    RULE_type_parameter = 7
    RULE_type_bound = 8
    RULE_type_argument = 9
    RULE_type_arguments = 10
    RULE_super_suffix = 11
    RULE_explicit_generic_invocation_suffix = 12
    RULE_arguments = 13
    RULE_class_or_interface_type = 14
    RULE_class_type = 15
    RULE_compilation_unit = 16
    RULE_package_declaration = 17
    RULE_import_declaration = 18
    RULE_module_declaration = 19
    RULE_type_declaration = 20
    RULE_module_body = 21
    RULE_module_directive = 22
    RULE_modifier = 23
    RULE_requires_modifier = 24
    RULE_class_or_interface_modifier = 25
    RULE_class_declaration = 26
    RULE_type_parameters = 27
    RULE_class_body = 28
    RULE_class_body_declaration = 29
    RULE_member_declaration = 30
    RULE_field_declaration = 31
    RULE_variable_declarators = 32
    RULE_variable_declarator = 33
    RULE_variable_declarator_id = 34
    RULE_variable_initializer = 35
    RULE_method_declaration = 36
    RULE_receiver_parameter = 37
    RULE_formal_parameter_list = 38
    RULE_formal_parameters = 39
    RULE_formal_parameter = 40
    RULE_variable_modifier = 41
    RULE_method_body = 42
    RULE_generic_constructor_declaration = 43
    RULE_constructor_declaration = 44
    RULE_enum_declaration = 45
    RULE_enum_constants = 46
    RULE_enum_constant = 47
    RULE_enum_body_declarations = 48
    RULE_record_declaration = 49
    RULE_record_header = 50
    RULE_record_component_list = 51
    RULE_record_component = 52
    RULE_record_body = 53
    RULE_compact_constructor_declaration = 54
    RULE_interface_declaration = 55
    RULE_interface_body = 56
    RULE_type_type_or_void = 57
    RULE_generic_method_declaration = 58
    RULE_interface_body_declaration = 59
    RULE_interface_member_declaration = 60
    RULE_const_declaration = 61
    RULE_constant_declarator = 62
    RULE_interface_method_declaration = 63
    RULE_interface_method_modifier = 64
    RULE_generic_interface_method_declaration = 65
    RULE_interface_common_body_declaration = 66
    RULE_default_value = 67
    RULE_alt_annotation_qualified_name = 68
    RULE_annotation = 69
    RULE_element_value_pairs = 70
    RULE_element_value_pair = 71
    RULE_element_value = 72
    RULE_element_value_array_initializer = 73
    RULE_annotation_type_declaration = 74
    RULE_annotation_type_body = 75
    RULE_annotation_type_element_declaration = 76
    RULE_annotation_type_element_rest = 77
    RULE_annotation_method_or_constant_rest = 78
    RULE_annotation_method_rest = 79
    RULE_annotation_constant_rest = 80
    RULE_array_initializer = 81
    RULE_block = 82
    RULE_block_statement = 83
    RULE_local_variable_declaration = 84
    RULE_statement = 85
    RULE_switch_rule_outcome = 86
    RULE_switch_block_statement_group = 87
    RULE_switch_label = 88
    RULE_for_init = 89
    RULE_for_control = 90
    RULE_enhanced_for_control = 91
    RULE_catch_clause = 92
    RULE_catch_type = 93
    RULE_finally_block = 94
    RULE_resource_specification = 95
    RULE_resources = 96
    RULE_resource = 97
    RULE_pattern = 98
    RULE_primary = 99
    RULE_literal = 100
    RULE_integer_literal = 101
    RULE_float_literal = 102
    RULE_type_arguments_or_diamond = 103
    RULE_expression = 104
    RULE_switch_expression = 105
    RULE_switch_labeled_rule = 106
    RULE_qualified_name_list = 107
    RULE_last_formal_parameter = 108
    RULE_qualified_name = 109
    RULE_local_type_declaration = 110
    RULE_par_expression = 111
    RULE_expression_list = 112
    RULE_method_call = 113
    RULE_guarded_pattern = 114
    RULE_creator = 115
    RULE_created_name = 116
    RULE_inner_creator = 117
    RULE_array_creator_rest = 118
    RULE_class_creator_rest = 119
    RULE_explicit_generic_invocation = 120

    ruleNames =  [ "identifier", "type_identifier", "non_wild_card_type_arguments_or_diamond", 
                   "non_wildcard_type_arguments", "type_list", "type_type", 
                   "primitive_type", "type_parameter", "type_bound", "type_argument", 
                   "type_arguments", "super_suffix", "explicit_generic_invocation_suffix", 
                   "arguments", "class_or_interface_type", "class_type", 
                   "compilation_unit", "package_declaration", "import_declaration", 
                   "module_declaration", "type_declaration", "module_body", 
                   "module_directive", "modifier", "requires_modifier", 
                   "class_or_interface_modifier", "class_declaration", "type_parameters", 
                   "class_body", "class_body_declaration", "member_declaration", 
                   "field_declaration", "variable_declarators", "variable_declarator", 
                   "variable_declarator_id", "variable_initializer", "method_declaration", 
                   "receiver_parameter", "formal_parameter_list", "formal_parameters", 
                   "formal_parameter", "variable_modifier", "method_body", 
                   "generic_constructor_declaration", "constructor_declaration", 
                   "enum_declaration", "enum_constants", "enum_constant", 
                   "enum_body_declarations", "record_declaration", "record_header", 
                   "record_component_list", "record_component", "record_body", 
                   "compact_constructor_declaration", "interface_declaration", 
                   "interface_body", "type_type_or_void", "generic_method_declaration", 
                   "interface_body_declaration", "interface_member_declaration", 
                   "const_declaration", "constant_declarator", "interface_method_declaration", 
                   "interface_method_modifier", "generic_interface_method_declaration", 
                   "interface_common_body_declaration", "default_value", 
                   "alt_annotation_qualified_name", "annotation", "element_value_pairs", 
                   "element_value_pair", "element_value", "element_value_array_initializer", 
                   "annotation_type_declaration", "annotation_type_body", 
                   "annotation_type_element_declaration", "annotation_type_element_rest", 
                   "annotation_method_or_constant_rest", "annotation_method_rest", 
                   "annotation_constant_rest", "array_initializer", "block", 
                   "block_statement", "local_variable_declaration", "statement", 
                   "switch_rule_outcome", "switch_block_statement_group", 
                   "switch_label", "for_init", "for_control", "enhanced_for_control", 
                   "catch_clause", "catch_type", "finally_block", "resource_specification", 
                   "resources", "resource", "pattern", "primary", "literal", 
                   "integer_literal", "float_literal", "type_arguments_or_diamond", 
                   "expression", "switch_expression", "switch_labeled_rule", 
                   "qualified_name_list", "last_formal_parameter", "qualified_name", 
                   "local_type_declaration", "par_expression", "expression_list", 
                   "method_call", "guarded_pattern", "creator", "created_name", 
                   "inner_creator", "array_creator_rest", "class_creator_rest", 
                   "explicit_generic_invocation" ]

    EOF = Token.EOF
    ABSTRACT=1
    ASSERT=2
    BOOLEAN=3
    BREAK=4
    BYTE=5
    CASE=6
    CATCH=7
    CHAR=8
    CLASS=9
    CONST=10
    CONTINUE=11
    DEFAULT=12
    DO=13
    DOUBLE=14
    ELSE=15
    ENUM=16
    EXTENDS=17
    FINAL=18
    FINALLY=19
    FLOAT=20
    FOR=21
    IF=22
    GOTO=23
    IMPLEMENTS=24
    IMPORT=25
    INSTANCEOF=26
    INT=27
    INTERFACE=28
    LONG=29
    NATIVE=30
    NEW=31
    PACKAGE=32
    PRIVATE=33
    PROTECTED=34
    PUBLIC=35
    RETURN=36
    SHORT=37
    STATIC=38
    STRICTFP=39
    SUPER=40
    SWITCH=41
    SYNCHRONIZED=42
    THIS=43
    THROW=44
    THROWS=45
    TRANSIENT=46
    TRY=47
    VOID=48
    VOLATILE=49
    WHILE=50
    MODULE=51
    OPEN=52
    REQUIRES=53
    EXPORTS=54
    OPENS=55
    TO=56
    USES=57
    PROVIDES=58
    WITH=59
    TRANSITIVE=60
    VAR=61
    YIELD=62
    RECORD=63
    SEALED=64
    PERMITS=65
    NON_SEALED=66
    SEMI=67
    COMMA=68
    DOT=69
    PAREN_S=70
    PAREN_E=71
    BLOCK_S=72
    BLOCK_E=73
    ARRAY_S=74
    ARRAY_E=75
    DECIMAL_LITERAL=76
    HEX_LITERAL=77
    OCT_LITERAL=78
    BINARY_LITERAL=79
    FLOAT_LITERAL=80
    HEX_FLOAT_LITERAL=81
    BOOL_LITERAL=82
    CHAR_LITERAL=83
    STRING_LITERAL=84
    TEXT_BLOCK=85
    NULL_LITERAL=86
    WS=87
    COMMENT=88
    LINE_COMMENT=89
    ASSIGN=90
    GT=91
    LT=92
    LOG_NOT=93
    TILDE=94
    QUESTION=95
    COLON=96
    EQUAL=97
    LE=98
    GE=99
    NOTEQUAL=100
    LOG_AND=101
    LOG_OR=102
    UNN_INC=103
    UNN_DEC=104
    ADD=105
    SUB=106
    MUL=107
    DIV=108
    BITAND=109
    BITOR=110
    CARET=111
    MOD=112
    ADD_ASS=113
    SUB_ASS=114
    MUL_ASS=115
    DIV_ASS=116
    AND_ASS=117
    OR_ASS=118
    XOR_ASS=119
    MOD_ASS=120
    LSHIFT_ASS=121
    RSHIFT_ASS=122
    URSHIFT_ASS=123
    ARROW=124
    COLONCOLON=125
    AT=126
    ELLIPSIS=127
    IDENTIFIER=128

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = JavaParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==128):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_type_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_identifier" ):
                listener.enterType_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_identifier" ):
                listener.exitType_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_identifier" ):
                return visitor.visitType_identifier(self)
            else:
                return visitor.visitChildren(self)




    def type_identifier(self):

        localctx = JavaParser.Type_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_type_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 29695) != 0) or _la==128):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_wild_card_type_arguments_or_diamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def non_wildcard_type_arguments(self):
            return self.getTypedRuleContext(JavaParser.Non_wildcard_type_argumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_non_wild_card_type_arguments_or_diamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_wild_card_type_arguments_or_diamond" ):
                listener.enterNon_wild_card_type_arguments_or_diamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_wild_card_type_arguments_or_diamond" ):
                listener.exitNon_wild_card_type_arguments_or_diamond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_wild_card_type_arguments_or_diamond" ):
                return visitor.visitNon_wild_card_type_arguments_or_diamond(self)
            else:
                return visitor.visitChildren(self)




    def non_wild_card_type_arguments_or_diamond(self):

        localctx = JavaParser.Non_wild_card_type_arguments_or_diamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_non_wild_card_type_arguments_or_diamond)
        try:
            self.state = 249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 246
                self.match(JavaParser.LT)
                self.state = 247
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 248
                self.non_wildcard_type_arguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_wildcard_type_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def type_list(self):
            return self.getTypedRuleContext(JavaParser.Type_listContext,0)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_non_wildcard_type_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_wildcard_type_arguments" ):
                listener.enterNon_wildcard_type_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_wildcard_type_arguments" ):
                listener.exitNon_wildcard_type_arguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_wildcard_type_arguments" ):
                return visitor.visitNon_wildcard_type_arguments(self)
            else:
                return visitor.visitChildren(self)




    def non_wildcard_type_arguments(self):

        localctx = JavaParser.Non_wildcard_type_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_non_wildcard_type_arguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(JavaParser.LT)
            self.state = 252
            self.type_list()
            self.state = 253
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Type_typeContext)
            else:
                return self.getTypedRuleContext(JavaParser.Type_typeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_list" ):
                listener.enterType_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_list" ):
                listener.exitType_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_list" ):
                return visitor.visitType_list(self)
            else:
                return visitor.visitChildren(self)




    def type_list(self):

        localctx = JavaParser.Type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.type_type()
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 256
                self.match(JavaParser.COMMA)
                self.state = 257
                self.type_type()
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_or_interface_type(self):
            return self.getTypedRuleContext(JavaParser.Class_or_interface_typeContext,0)


        def primitive_type(self):
            return self.getTypedRuleContext(JavaParser.Primitive_typeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def ARRAY_S(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ARRAY_S)
            else:
                return self.getToken(JavaParser.ARRAY_S, i)

        def ARRAY_E(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ARRAY_E)
            else:
                return self.getToken(JavaParser.ARRAY_E, i)

        def getRuleIndex(self):
            return JavaParser.RULE_type_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_type" ):
                listener.enterType_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_type" ):
                listener.exitType_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_type" ):
                return visitor.visitType_type(self)
            else:
                return visitor.visitChildren(self)




    def type_type(self):

        localctx = JavaParser.Type_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_type_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 263
                    self.annotation() 
                self.state = 268
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 271
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 128]:
                self.state = 269
                self.class_or_interface_type()
                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 37]:
                self.state = 270
                self.primitive_type()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 283
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==126 or _la==128:
                        self.state = 273
                        self.annotation()
                        self.state = 278
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 279
                    self.match(JavaParser.ARRAY_S)
                    self.state = 280
                    self.match(JavaParser.ARRAY_E) 
                self.state = 285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primitive_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(JavaParser.BOOLEAN, 0)

        def CHAR(self):
            return self.getToken(JavaParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(JavaParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(JavaParser.SHORT, 0)

        def INT(self):
            return self.getToken(JavaParser.INT, 0)

        def LONG(self):
            return self.getToken(JavaParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(JavaParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(JavaParser.DOUBLE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_primitive_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_type" ):
                listener.enterPrimitive_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_type" ):
                listener.exitPrimitive_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitive_type" ):
                return visitor.visitPrimitive_type(self)
            else:
                return visitor.visitChildren(self)




    def primitive_type(self):

        localctx = JavaParser.Primitive_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_primitive_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 138111107368) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def type_bound(self):
            return self.getTypedRuleContext(JavaParser.Type_boundContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter" ):
                listener.enterType_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter" ):
                listener.exitType_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_parameter" ):
                return visitor.visitType_parameter(self)
            else:
                return visitor.visitChildren(self)




    def type_parameter(self):

        localctx = JavaParser.Type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 288
                    self.annotation() 
                self.state = 293
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

            self.state = 294
            self.identifier()
            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 295
                self.match(JavaParser.EXTENDS)
                self.state = 299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 296
                        self.annotation() 
                    self.state = 301
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 302
                self.type_bound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Type_typeContext)
            else:
                return self.getTypedRuleContext(JavaParser.Type_typeContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def getRuleIndex(self):
            return JavaParser.RULE_type_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_bound" ):
                listener.enterType_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_bound" ):
                listener.exitType_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_bound" ):
                return visitor.visitType_bound(self)
            else:
                return visitor.visitChildren(self)




    def type_bound(self):

        localctx = JavaParser.Type_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_type_bound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.type_type()
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==109:
                self.state = 306
                self.match(JavaParser.BITAND)
                self.state = 307
                self.type_type()
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_type_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_argument" ):
                listener.enterType_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_argument" ):
                listener.exitType_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_argument" ):
                return visitor.visitType_argument(self)
            else:
                return visitor.visitChildren(self)




    def type_argument(self):

        localctx = JavaParser.Type_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_type_argument)
        self._la = 0 # Token type
        try:
            self.state = 325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 313
                self.type_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==126 or _la==128:
                    self.state = 314
                    self.annotation()
                    self.state = 319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 320
                self.match(JavaParser.QUESTION)
                self.state = 323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17 or _la==40:
                    self.state = 321
                    _la = self._input.LA(1)
                    if not(_la==17 or _la==40):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 322
                    self.type_type()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def type_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Type_argumentContext)
            else:
                return self.getTypedRuleContext(JavaParser.Type_argumentContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_type_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_arguments" ):
                listener.enterType_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_arguments" ):
                listener.exitType_arguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_arguments" ):
                return visitor.visitType_arguments(self)
            else:
                return visitor.visitChildren(self)




    def type_arguments(self):

        localctx = JavaParser.Type_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_type_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(JavaParser.LT)
            self.state = 328
            self.type_argument()
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 329
                self.match(JavaParser.COMMA)
                self.state = 330
                self.type_argument()
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 336
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Super_suffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def type_arguments(self):
            return self.getTypedRuleContext(JavaParser.Type_argumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_super_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuper_suffix" ):
                listener.enterSuper_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuper_suffix" ):
                listener.exitSuper_suffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuper_suffix" ):
                return visitor.visitSuper_suffix(self)
            else:
                return visitor.visitChildren(self)




    def super_suffix(self):

        localctx = JavaParser.Super_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_super_suffix)
        self._la = 0 # Token type
        try:
            self.state = 347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 338
                self.arguments()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self.match(JavaParser.DOT)
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 340
                    self.type_arguments()


                self.state = 343
                self.identifier()
                self.state = 345
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 344
                    self.arguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_generic_invocation_suffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def super_suffix(self):
            return self.getTypedRuleContext(JavaParser.Super_suffixContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicit_generic_invocation_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_generic_invocation_suffix" ):
                listener.enterExplicit_generic_invocation_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_generic_invocation_suffix" ):
                listener.exitExplicit_generic_invocation_suffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicit_generic_invocation_suffix" ):
                return visitor.visitExplicit_generic_invocation_suffix(self)
            else:
                return visitor.visitChildren(self)




    def explicit_generic_invocation_suffix(self):

        localctx = JavaParser.Explicit_generic_invocation_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_explicit_generic_invocation_suffix)
        try:
            self.state = 354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 349
                self.match(JavaParser.SUPER)
                self.state = 350
                self.super_suffix()
                pass
            elif token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 351
                self.identifier()
                self.state = 352
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAREN_S(self):
            return self.getToken(JavaParser.PAREN_S, 0)

        def PAREN_E(self):
            return self.getToken(JavaParser.PAREN_E, 0)

        def expression_list(self):
            return self.getTypedRuleContext(JavaParser.Expression_listContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = JavaParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(JavaParser.PAREN_S)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 360288099068149697) != 0):
                self.state = 357
                self.expression_list()


            self.state = 360
            self.match(JavaParser.PAREN_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_or_interface_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_identifier(self):
            return self.getTypedRuleContext(JavaParser.Type_identifierContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def type_arguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Type_argumentsContext)
            else:
                return self.getTypedRuleContext(JavaParser.Type_argumentsContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_class_or_interface_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_interface_type" ):
                listener.enterClass_or_interface_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_interface_type" ):
                listener.exitClass_or_interface_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_interface_type" ):
                return visitor.visitClass_or_interface_type(self)
            else:
                return visitor.visitChildren(self)




    def class_or_interface_type(self):

        localctx = JavaParser.Class_or_interface_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_class_or_interface_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 362
                    self.identifier()
                    self.state = 364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==92:
                        self.state = 363
                        self.type_arguments()


                    self.state = 366
                    self.match(JavaParser.DOT) 
                self.state = 372
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

            self.state = 373
            self.type_identifier()
            self.state = 375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 374
                self.type_arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def class_or_interface_type(self):
            return self.getTypedRuleContext(JavaParser.Class_or_interface_typeContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def type_arguments(self):
            return self.getTypedRuleContext(JavaParser.Type_argumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_class_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type" ):
                listener.enterClass_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type" ):
                listener.exitClass_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_type" ):
                return visitor.visitClass_type(self)
            else:
                return visitor.visitChildren(self)




    def class_type(self):

        localctx = JavaParser.Class_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_class_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 377
                self.class_or_interface_type()
                self.state = 378
                self.match(JavaParser.DOT)


            self.state = 385
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 382
                    self.annotation() 
                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 388
            self.identifier()
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 389
                self.type_arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def package_declaration(self):
            return self.getTypedRuleContext(JavaParser.Package_declarationContext,0)


        def import_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Import_declarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.Import_declarationContext,i)


        def type_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Type_declarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.Type_declarationContext,i)


        def module_declaration(self):
            return self.getTypedRuleContext(JavaParser.Module_declarationContext,0)


        def EOF(self):
            return self.getToken(JavaParser.EOF, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_compilation_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit" ):
                listener.enterCompilation_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit" ):
                listener.exitCompilation_unit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilation_unit" ):
                return visitor.visitCompilation_unit(self)
            else:
                return visitor.visitChildren(self)




    def compilation_unit(self):

        localctx = JavaParser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.state = 410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 393
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 392
                    self.package_declaration()


                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==25:
                    self.state = 395
                    self.import_declaration()
                    self.state = 400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -1125457390829311) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -6917529027641081849) != 0):
                    self.state = 401
                    self.type_declaration()
                    self.state = 406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 407
                self.module_declaration()
                self.state = 408
                self.match(JavaParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(JavaParser.PACKAGE, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(JavaParser.Qualified_nameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_package_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_declaration" ):
                listener.enterPackage_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_declaration" ):
                listener.exitPackage_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_declaration" ):
                return visitor.visitPackage_declaration(self)
            else:
                return visitor.visitChildren(self)




    def package_declaration(self):

        localctx = JavaParser.Package_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_package_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==126 or _la==128:
                self.state = 412
                self.annotation()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 418
            self.match(JavaParser.PACKAGE)
            self.state = 419
            self.qualified_name()
            self.state = 420
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(JavaParser.IMPORT, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(JavaParser.Qualified_nameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_import_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_declaration" ):
                listener.enterImport_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_declaration" ):
                listener.exitImport_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_declaration" ):
                return visitor.visitImport_declaration(self)
            else:
                return visitor.visitChildren(self)




    def import_declaration(self):

        localctx = JavaParser.Import_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_import_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(JavaParser.IMPORT)
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 423
                self.match(JavaParser.STATIC)


            self.state = 426
            self.qualified_name()
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 427
                self.match(JavaParser.DOT)
                self.state = 428
                self.match(JavaParser.MUL)


            self.state = 431
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(JavaParser.Qualified_nameContext,0)


        def module_body(self):
            return self.getTypedRuleContext(JavaParser.Module_bodyContext,0)


        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_module_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_declaration" ):
                listener.enterModule_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_declaration" ):
                listener.exitModule_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule_declaration" ):
                return visitor.visitModule_declaration(self)
            else:
                return visitor.visitChildren(self)




    def module_declaration(self):

        localctx = JavaParser.Module_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_module_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 433
                self.match(JavaParser.OPEN)


            self.state = 436
            self.match(JavaParser.MODULE)
            self.state = 437
            self.qualified_name()
            self.state = 438
            self.module_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_declaration(self):
            return self.getTypedRuleContext(JavaParser.Class_declarationContext,0)


        def enum_declaration(self):
            return self.getTypedRuleContext(JavaParser.Enum_declarationContext,0)


        def interface_declaration(self):
            return self.getTypedRuleContext(JavaParser.Interface_declarationContext,0)


        def annotation_type_declaration(self):
            return self.getTypedRuleContext(JavaParser.Annotation_type_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(JavaParser.Record_declarationContext,0)


        def class_or_interface_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Class_or_interface_modifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.Class_or_interface_modifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declaration" ):
                listener.enterType_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declaration" ):
                listener.exitType_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_declaration" ):
                return visitor.visitType_declaration(self)
            else:
                return visitor.visitChildren(self)




    def type_declaration(self):

        localctx = JavaParser.Type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_type_declaration)
        try:
            self.state = 454
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 9, 16, 18, 28, 33, 34, 35, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 126, 128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 440
                        self.class_or_interface_modifier() 
                    self.state = 445
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                self.state = 451
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [9]:
                    self.state = 446
                    self.class_declaration()
                    pass
                elif token in [16]:
                    self.state = 447
                    self.enum_declaration()
                    pass
                elif token in [28]:
                    self.state = 448
                    self.interface_declaration()
                    pass
                elif token in [126]:
                    self.state = 449
                    self.annotation_type_declaration()
                    pass
                elif token in [63]:
                    self.state = 450
                    self.record_declaration()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 453
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK_S(self):
            return self.getToken(JavaParser.BLOCK_S, 0)

        def BLOCK_E(self):
            return self.getToken(JavaParser.BLOCK_E, 0)

        def module_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Module_directiveContext)
            else:
                return self.getTypedRuleContext(JavaParser.Module_directiveContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_module_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_body" ):
                listener.enterModule_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_body" ):
                listener.exitModule_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule_body" ):
                return visitor.visitModule_body(self)
            else:
                return visitor.visitChildren(self)




    def module_body(self):

        localctx = JavaParser.Module_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_module_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(JavaParser.BLOCK_S)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 495395959010754560) != 0):
                self.state = 457
                self.module_directive()
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 463
            self.match(JavaParser.BLOCK_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def qualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Qualified_nameContext)
            else:
                return self.getTypedRuleContext(JavaParser.Qualified_nameContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def requires_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Requires_modifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.Requires_modifierContext,i)


        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_module_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_directive" ):
                listener.enterModule_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_directive" ):
                listener.exitModule_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule_directive" ):
                return visitor.visitModule_directive(self)
            else:
                return visitor.visitChildren(self)




    def module_directive(self):

        localctx = JavaParser.Module_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_module_directive)
        self._la = 0 # Token type
        try:
            self.state = 501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 465
                self.match(JavaParser.REQUIRES)
                self.state = 469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 466
                        self.requires_modifier() 
                    self.state = 471
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

                self.state = 472
                self.qualified_name()
                self.state = 473
                self.match(JavaParser.SEMI)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.match(JavaParser.EXPORTS)
                self.state = 476
                self.qualified_name()
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 477
                    self.match(JavaParser.TO)
                    self.state = 478
                    self.qualified_name()


                self.state = 481
                self.match(JavaParser.SEMI)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 483
                self.match(JavaParser.OPENS)
                self.state = 484
                self.qualified_name()
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 485
                    self.match(JavaParser.TO)
                    self.state = 486
                    self.qualified_name()


                self.state = 489
                self.match(JavaParser.SEMI)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 4)
                self.state = 491
                self.match(JavaParser.USES)
                self.state = 492
                self.qualified_name()
                self.state = 493
                self.match(JavaParser.SEMI)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 5)
                self.state = 495
                self.match(JavaParser.PROVIDES)
                self.state = 496
                self.qualified_name()
                self.state = 497
                self.match(JavaParser.WITH)
                self.state = 498
                self.qualified_name()
                self.state = 499
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_or_interface_modifier(self):
            return self.getTypedRuleContext(JavaParser.Class_or_interface_modifierContext,0)


        def NATIVE(self):
            return self.getToken(JavaParser.NATIVE, 0)

        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def TRANSIENT(self):
            return self.getToken(JavaParser.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(JavaParser.VOLATILE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = JavaParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_modifier)
        try:
            self.state = 508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 18, 33, 34, 35, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 126, 128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 503
                self.class_or_interface_modifier()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 504
                self.match(JavaParser.NATIVE)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 505
                self.match(JavaParser.SYNCHRONIZED)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 4)
                self.state = 506
                self.match(JavaParser.TRANSIENT)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 5)
                self.state = 507
                self.match(JavaParser.VOLATILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Requires_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_requires_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequires_modifier" ):
                listener.enterRequires_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequires_modifier" ):
                listener.exitRequires_modifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequires_modifier" ):
                return visitor.visitRequires_modifier(self)
            else:
                return visitor.visitChildren(self)




    def requires_modifier(self):

        localctx = JavaParser.Requires_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_requires_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            _la = self._input.LA(1)
            if not(_la==38 or _la==60):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_or_interface_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def NON_SEALED(self):
            return self.getToken(JavaParser.NON_SEALED, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_class_or_interface_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_interface_modifier" ):
                listener.enterClass_or_interface_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_interface_modifier" ):
                listener.exitClass_or_interface_modifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_interface_modifier" ):
                return visitor.visitClass_or_interface_modifier(self)
            else:
                return visitor.visitChildren(self)




    def class_or_interface_modifier(self):

        localctx = JavaParser.Class_or_interface_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_class_or_interface_modifier)
        try:
            self.state = 522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 512
                self.annotation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 513
                self.match(JavaParser.PUBLIC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 514
                self.match(JavaParser.PROTECTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 515
                self.match(JavaParser.PRIVATE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 516
                self.match(JavaParser.STATIC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 517
                self.match(JavaParser.ABSTRACT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 518
                self.match(JavaParser.FINAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 519
                self.match(JavaParser.STRICTFP)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 520
                self.match(JavaParser.SEALED)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 521
                self.match(JavaParser.NON_SEALED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(JavaParser.Class_bodyContext,0)


        def type_parameters(self):
            return self.getTypedRuleContext(JavaParser.Type_parametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def type_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Type_listContext)
            else:
                return self.getTypedRuleContext(JavaParser.Type_listContext,i)


        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_class_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_declaration" ):
                listener.enterClass_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_declaration" ):
                listener.exitClass_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_declaration" ):
                return visitor.visitClass_declaration(self)
            else:
                return visitor.visitChildren(self)




    def class_declaration(self):

        localctx = JavaParser.Class_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_class_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.match(JavaParser.CLASS)
            self.state = 525
            self.identifier()
            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 526
                self.type_parameters()


            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 529
                self.match(JavaParser.EXTENDS)
                self.state = 530
                self.type_type()


            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 533
                self.match(JavaParser.IMPLEMENTS)
                self.state = 534
                self.type_list()


            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 537
                self.match(JavaParser.PERMITS)
                self.state = 538
                self.type_list()


            self.state = 541
            self.class_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Type_parameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.Type_parameterContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_type_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameters" ):
                listener.enterType_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameters" ):
                listener.exitType_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_parameters" ):
                return visitor.visitType_parameters(self)
            else:
                return visitor.visitChildren(self)




    def type_parameters(self):

        localctx = JavaParser.Type_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_type_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.match(JavaParser.LT)
            self.state = 544
            self.type_parameter()
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 545
                self.match(JavaParser.COMMA)
                self.state = 546
                self.type_parameter()
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 552
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK_S(self):
            return self.getToken(JavaParser.BLOCK_S, 0)

        def BLOCK_E(self):
            return self.getToken(JavaParser.BLOCK_E, 0)

        def class_body_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Class_body_declarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.Class_body_declarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_class_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_body" ):
                listener.enterClass_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_body" ):
                listener.exitClass_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_body" ):
                return visitor.visitClass_body(self)
            else:
                return visitor.visitChildren(self)




    def class_body(self):

        localctx = JavaParser.Class_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_class_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.match(JavaParser.BLOCK_S)
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -665791937994347) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -6917529027506863993) != 0):
                self.state = 555
                self.class_body_declaration()
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 561
            self.match(JavaParser.BLOCK_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_body_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def member_declaration(self):
            return self.getTypedRuleContext(JavaParser.Member_declarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_class_body_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_body_declaration" ):
                listener.enterClass_body_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_body_declaration" ):
                listener.exitClass_body_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_body_declaration" ):
                return visitor.visitClass_body_declaration(self)
            else:
                return visitor.visitChildren(self)




    def class_body_declaration(self):

        localctx = JavaParser.Class_body_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_class_body_declaration)
        self._la = 0 # Token type
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 563
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38:
                    self.state = 564
                    self.match(JavaParser.STATIC)


                self.state = 567
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 571
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 568
                        self.modifier() 
                    self.state = 573
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

                self.state = 574
                self.member_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_declaration(self):
            return self.getTypedRuleContext(JavaParser.Record_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(JavaParser.Method_declarationContext,0)


        def generic_method_declaration(self):
            return self.getTypedRuleContext(JavaParser.Generic_method_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(JavaParser.Field_declarationContext,0)


        def constructor_declaration(self):
            return self.getTypedRuleContext(JavaParser.Constructor_declarationContext,0)


        def generic_constructor_declaration(self):
            return self.getTypedRuleContext(JavaParser.Generic_constructor_declarationContext,0)


        def interface_declaration(self):
            return self.getTypedRuleContext(JavaParser.Interface_declarationContext,0)


        def annotation_type_declaration(self):
            return self.getTypedRuleContext(JavaParser.Annotation_type_declarationContext,0)


        def class_declaration(self):
            return self.getTypedRuleContext(JavaParser.Class_declarationContext,0)


        def enum_declaration(self):
            return self.getTypedRuleContext(JavaParser.Enum_declarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declaration" ):
                listener.enterMember_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declaration" ):
                listener.exitMember_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMember_declaration" ):
                return visitor.visitMember_declaration(self)
            else:
                return visitor.visitChildren(self)




    def member_declaration(self):

        localctx = JavaParser.Member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_member_declaration)
        try:
            self.state = 587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 577
                self.record_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 578
                self.method_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 579
                self.generic_method_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 580
                self.field_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 581
                self.constructor_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 582
                self.generic_constructor_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 583
                self.interface_declaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 584
                self.annotation_type_declaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 585
                self.class_declaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 586
                self.enum_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def variable_declarators(self):
            return self.getTypedRuleContext(JavaParser.Variable_declaratorsContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_field_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_declaration" ):
                listener.enterField_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_declaration" ):
                listener.exitField_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_declaration" ):
                return visitor.visitField_declaration(self)
            else:
                return visitor.visitChildren(self)




    def field_declaration(self):

        localctx = JavaParser.Field_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_field_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.type_type()
            self.state = 590
            self.variable_declarators()
            self.state = 591
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Variable_declaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.Variable_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variable_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarators" ):
                listener.enterVariable_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarators" ):
                listener.exitVariable_declarators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_declarators" ):
                return visitor.visitVariable_declarators(self)
            else:
                return visitor.visitChildren(self)




    def variable_declarators(self):

        localctx = JavaParser.Variable_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_variable_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.variable_declarator()
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 594
                self.match(JavaParser.COMMA)
                self.state = 595
                self.variable_declarator()
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarator_id(self):
            return self.getTypedRuleContext(JavaParser.Variable_declarator_idContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(JavaParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarator" ):
                listener.enterVariable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarator" ):
                listener.exitVariable_declarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_declarator" ):
                return visitor.visitVariable_declarator(self)
            else:
                return visitor.visitChildren(self)




    def variable_declarator(self):

        localctx = JavaParser.Variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.variable_declarator_id()
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 602
                self.match(JavaParser.ASSIGN)
                self.state = 603
                self.variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declarator_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ARRAY_S(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ARRAY_S)
            else:
                return self.getToken(JavaParser.ARRAY_S, i)

        def ARRAY_E(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ARRAY_E)
            else:
                return self.getToken(JavaParser.ARRAY_E, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variable_declarator_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarator_id" ):
                listener.enterVariable_declarator_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarator_id" ):
                listener.exitVariable_declarator_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_declarator_id" ):
                return visitor.visitVariable_declarator_id(self)
            else:
                return visitor.visitChildren(self)




    def variable_declarator_id(self):

        localctx = JavaParser.Variable_declarator_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_variable_declarator_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.identifier()
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==74:
                self.state = 607
                self.match(JavaParser.ARRAY_S)
                self.state = 608
                self.match(JavaParser.ARRAY_E)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_initializer(self):
            return self.getTypedRuleContext(JavaParser.Array_initializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_initializer" ):
                listener.enterVariable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_initializer" ):
                listener.exitVariable_initializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_initializer" ):
                return visitor.visitVariable_initializer(self)
            else:
                return visitor.visitChildren(self)




    def variable_initializer(self):

        localctx = JavaParser.Variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_variable_initializer)
        try:
            self.state = 616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 614
                self.array_initializer()
                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 31, 37, 40, 41, 43, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 103, 104, 105, 106, 126, 128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 615
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type_or_void(self):
            return self.getTypedRuleContext(JavaParser.Type_type_or_voidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formal_parameters(self):
            return self.getTypedRuleContext(JavaParser.Formal_parametersContext,0)


        def method_body(self):
            return self.getTypedRuleContext(JavaParser.Method_bodyContext,0)


        def ARRAY_S(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ARRAY_S)
            else:
                return self.getToken(JavaParser.ARRAY_S, i)

        def ARRAY_E(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ARRAY_E)
            else:
                return self.getToken(JavaParser.ARRAY_E, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(JavaParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_declaration" ):
                return visitor.visitMethod_declaration(self)
            else:
                return visitor.visitChildren(self)




    def method_declaration(self):

        localctx = JavaParser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.type_type_or_void()
            self.state = 619
            self.identifier()
            self.state = 620
            self.formal_parameters()
            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==74:
                self.state = 621
                self.match(JavaParser.ARRAY_S)
                self.state = 622
                self.match(JavaParser.ARRAY_E)
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 628
                self.match(JavaParser.THROWS)
                self.state = 629
                self.qualified_name_list()


            self.state = 632
            self.method_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Receiver_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_receiver_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiver_parameter" ):
                listener.enterReceiver_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiver_parameter" ):
                listener.exitReceiver_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiver_parameter" ):
                return visitor.visitReceiver_parameter(self)
            else:
                return visitor.visitChildren(self)




    def receiver_parameter(self):

        localctx = JavaParser.Receiver_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_receiver_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.type_type()
            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==128:
                self.state = 635
                self.identifier()
                self.state = 636
                self.match(JavaParser.DOT)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 643
            self.match(JavaParser.THIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formal_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formal_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Formal_parameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.Formal_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def last_formal_parameter(self):
            return self.getTypedRuleContext(JavaParser.Last_formal_parameterContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formal_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormal_parameter_list" ):
                listener.enterFormal_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormal_parameter_list" ):
                listener.exitFormal_parameter_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormal_parameter_list" ):
                return visitor.visitFormal_parameter_list(self)
            else:
                return visitor.visitChildren(self)




    def formal_parameter_list(self):

        localctx = JavaParser.Formal_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_formal_parameter_list)
        self._la = 0 # Token type
        try:
            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 645
                self.formal_parameter()
                self.state = 650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 646
                        self.match(JavaParser.COMMA)
                        self.state = 647
                        self.formal_parameter() 
                    self.state = 652
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 653
                    self.match(JavaParser.COMMA)
                    self.state = 654
                    self.last_formal_parameter()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 657
                self.last_formal_parameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formal_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAREN_S(self):
            return self.getToken(JavaParser.PAREN_S, 0)

        def PAREN_E(self):
            return self.getToken(JavaParser.PAREN_E, 0)

        def receiver_parameter(self):
            return self.getTypedRuleContext(JavaParser.Receiver_parameterContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(JavaParser.Formal_parameter_listContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formal_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormal_parameters" ):
                listener.enterFormal_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormal_parameters" ):
                listener.exitFormal_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormal_parameters" ):
                return visitor.visitFormal_parameters(self)
            else:
                return visitor.visitChildren(self)




    def formal_parameters(self):

        localctx = JavaParser.Formal_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_formal_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(JavaParser.PAREN_S)
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223090579141953573) != 0) or _la==126 or _la==128:
                    self.state = 661
                    self.receiver_parameter()


                pass

            elif la_ == 2:
                self.state = 664
                self.receiver_parameter()
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 665
                    self.match(JavaParser.COMMA)
                    self.state = 666
                    self.formal_parameter_list()


                pass

            elif la_ == 3:
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223090579141986341) != 0) or _la==126 or _la==128:
                    self.state = 669
                    self.formal_parameter_list()


                pass


            self.state = 674
            self.match(JavaParser.PAREN_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formal_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def variable_declarator_id(self):
            return self.getTypedRuleContext(JavaParser.Variable_declarator_idContext,0)


        def variable_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Variable_modifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.Variable_modifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_formal_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormal_parameter" ):
                listener.enterFormal_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormal_parameter" ):
                listener.exitFormal_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormal_parameter" ):
                return visitor.visitFormal_parameter(self)
            else:
                return visitor.visitChildren(self)




    def formal_parameter(self):

        localctx = JavaParser.Formal_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_formal_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 676
                    self.variable_modifier() 
                self.state = 681
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

            self.state = 682
            self.type_type()
            self.state = 683
            self.variable_declarator_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variable_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_modifier" ):
                listener.enterVariable_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_modifier" ):
                listener.exitVariable_modifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_modifier" ):
                return visitor.visitVariable_modifier(self)
            else:
                return visitor.visitChildren(self)




    def variable_modifier(self):

        localctx = JavaParser.Variable_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_variable_modifier)
        try:
            self.state = 687
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 685
                self.match(JavaParser.FINAL)
                pass
            elif token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 126, 128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 686
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_method_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_body" ):
                listener.enterMethod_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_body" ):
                listener.exitMethod_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_body" ):
                return visitor.visitMethod_body(self)
            else:
                return visitor.visitChildren(self)




    def method_body(self):

        localctx = JavaParser.Method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_method_body)
        try:
            self.state = 691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                self.block()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 690
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_constructor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_parameters(self):
            return self.getTypedRuleContext(JavaParser.Type_parametersContext,0)


        def constructor_declaration(self):
            return self.getTypedRuleContext(JavaParser.Constructor_declarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_generic_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_constructor_declaration" ):
                listener.enterGeneric_constructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_constructor_declaration" ):
                listener.exitGeneric_constructor_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneric_constructor_declaration" ):
                return visitor.visitGeneric_constructor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def generic_constructor_declaration(self):

        localctx = JavaParser.Generic_constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_generic_constructor_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.type_parameters()
            self.state = 694
            self.constructor_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formal_parameters(self):
            return self.getTypedRuleContext(JavaParser.Formal_parametersContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(JavaParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor_declaration" ):
                return visitor.visitConstructor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def constructor_declaration(self):

        localctx = JavaParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.identifier()
            self.state = 697
            self.formal_parameters()
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 698
                self.match(JavaParser.THROWS)
                self.state = 699
                self.qualified_name_list()


            self.state = 702
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(JavaParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def BLOCK_S(self):
            return self.getToken(JavaParser.BLOCK_S, 0)

        def BLOCK_E(self):
            return self.getToken(JavaParser.BLOCK_E, 0)

        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def type_list(self):
            return self.getTypedRuleContext(JavaParser.Type_listContext,0)


        def enum_constants(self):
            return self.getTypedRuleContext(JavaParser.Enum_constantsContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def enum_body_declarations(self):
            return self.getTypedRuleContext(JavaParser.Enum_body_declarationsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enum_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_declaration" ):
                listener.enterEnum_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_declaration" ):
                listener.exitEnum_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_declaration" ):
                return visitor.visitEnum_declaration(self)
            else:
                return visitor.visitChildren(self)




    def enum_declaration(self):

        localctx = JavaParser.Enum_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_enum_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(JavaParser.ENUM)
            self.state = 705
            self.identifier()
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 706
                self.match(JavaParser.IMPLEMENTS)
                self.state = 707
                self.type_list()


            self.state = 710
            self.match(JavaParser.BLOCK_S)
            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==126 or _la==128:
                self.state = 711
                self.enum_constants()


            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 714
                self.match(JavaParser.COMMA)


            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 717
                self.enum_body_declarations()


            self.state = 720
            self.match(JavaParser.BLOCK_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_constantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Enum_constantContext)
            else:
                return self.getTypedRuleContext(JavaParser.Enum_constantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_enum_constants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_constants" ):
                listener.enterEnum_constants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_constants" ):
                listener.exitEnum_constants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_constants" ):
                return visitor.visitEnum_constants(self)
            else:
                return visitor.visitChildren(self)




    def enum_constants(self):

        localctx = JavaParser.Enum_constantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_enum_constants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.enum_constant()
            self.state = 727
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 723
                    self.match(JavaParser.COMMA)
                    self.state = 724
                    self.enum_constant() 
                self.state = 729
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def class_body(self):
            return self.getTypedRuleContext(JavaParser.Class_bodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enum_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_constant" ):
                listener.enterEnum_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_constant" ):
                listener.exitEnum_constant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_constant" ):
                return visitor.visitEnum_constant(self)
            else:
                return visitor.visitChildren(self)




    def enum_constant(self):

        localctx = JavaParser.Enum_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_enum_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 730
                    self.annotation() 
                self.state = 735
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 736
            self.identifier()
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 737
                self.arguments()


            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 740
                self.class_body()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_body_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def class_body_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Class_body_declarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.Class_body_declarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enum_body_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_body_declarations" ):
                listener.enterEnum_body_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_body_declarations" ):
                listener.exitEnum_body_declarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_body_declarations" ):
                return visitor.visitEnum_body_declarations(self)
            else:
                return visitor.visitChildren(self)




    def enum_body_declarations(self):

        localctx = JavaParser.Enum_body_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_enum_body_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(JavaParser.SEMI)
            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -665791937994347) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -6917529027506863993) != 0):
                self.state = 744
                self.class_body_declaration()
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def record_header(self):
            return self.getTypedRuleContext(JavaParser.Record_headerContext,0)


        def record_body(self):
            return self.getTypedRuleContext(JavaParser.Record_bodyContext,0)


        def type_parameters(self):
            return self.getTypedRuleContext(JavaParser.Type_parametersContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def type_list(self):
            return self.getTypedRuleContext(JavaParser.Type_listContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_record_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_declaration" ):
                listener.enterRecord_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_declaration" ):
                listener.exitRecord_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_declaration" ):
                return visitor.visitRecord_declaration(self)
            else:
                return visitor.visitChildren(self)




    def record_declaration(self):

        localctx = JavaParser.Record_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_record_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(JavaParser.RECORD)
            self.state = 751
            self.identifier()
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 752
                self.type_parameters()


            self.state = 755
            self.record_header()
            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 756
                self.match(JavaParser.IMPLEMENTS)
                self.state = 757
                self.type_list()


            self.state = 760
            self.record_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAREN_S(self):
            return self.getToken(JavaParser.PAREN_S, 0)

        def PAREN_E(self):
            return self.getToken(JavaParser.PAREN_E, 0)

        def record_component_list(self):
            return self.getTypedRuleContext(JavaParser.Record_component_listContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_record_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_header" ):
                listener.enterRecord_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_header" ):
                listener.exitRecord_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_header" ):
                return visitor.visitRecord_header(self)
            else:
                return visitor.visitChildren(self)




    def record_header(self):

        localctx = JavaParser.Record_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_record_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(JavaParser.PAREN_S)
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223090579141953573) != 0) or _la==126 or _la==128:
                self.state = 763
                self.record_component_list()


            self.state = 766
            self.match(JavaParser.PAREN_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_component_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_component(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Record_componentContext)
            else:
                return self.getTypedRuleContext(JavaParser.Record_componentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_record_component_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_component_list" ):
                listener.enterRecord_component_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_component_list" ):
                listener.exitRecord_component_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_component_list" ):
                return visitor.visitRecord_component_list(self)
            else:
                return visitor.visitChildren(self)




    def record_component_list(self):

        localctx = JavaParser.Record_component_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_record_component_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.record_component()
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 769
                self.match(JavaParser.COMMA)
                self.state = 770
                self.record_component()
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_componentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_record_component

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_component" ):
                listener.enterRecord_component(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_component" ):
                listener.exitRecord_component(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_component" ):
                return visitor.visitRecord_component(self)
            else:
                return visitor.visitChildren(self)




    def record_component(self):

        localctx = JavaParser.Record_componentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_record_component)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.type_type()
            self.state = 777
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK_S(self):
            return self.getToken(JavaParser.BLOCK_S, 0)

        def BLOCK_E(self):
            return self.getToken(JavaParser.BLOCK_E, 0)

        def class_body_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Class_body_declarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.Class_body_declarationContext,i)


        def compact_constructor_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Compact_constructor_declarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.Compact_constructor_declarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_record_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_body" ):
                listener.enterRecord_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_body" ):
                listener.exitRecord_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_body" ):
                return visitor.visitRecord_body(self)
            else:
                return visitor.visitChildren(self)




    def record_body(self):

        localctx = JavaParser.Record_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_record_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(JavaParser.BLOCK_S)
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -665791937994347) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -6917529027506863993) != 0):
                self.state = 782
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 780
                    self.class_body_declaration()
                    pass

                elif la_ == 2:
                    self.state = 781
                    self.compact_constructor_declaration()
                    pass


                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 787
            self.match(JavaParser.BLOCK_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compact_constructor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_compact_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompact_constructor_declaration" ):
                listener.enterCompact_constructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompact_constructor_declaration" ):
                listener.exitCompact_constructor_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompact_constructor_declaration" ):
                return visitor.visitCompact_constructor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def compact_constructor_declaration(self):

        localctx = JavaParser.Compact_constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_compact_constructor_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 789
                    self.modifier() 
                self.state = 794
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

            self.state = 795
            self.identifier()
            self.state = 796
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def interface_body(self):
            return self.getTypedRuleContext(JavaParser.Interface_bodyContext,0)


        def type_parameters(self):
            return self.getTypedRuleContext(JavaParser.Type_parametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def type_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Type_listContext)
            else:
                return self.getTypedRuleContext(JavaParser.Type_listContext,i)


        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interface_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_declaration" ):
                listener.enterInterface_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_declaration" ):
                listener.exitInterface_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_declaration" ):
                return visitor.visitInterface_declaration(self)
            else:
                return visitor.visitChildren(self)




    def interface_declaration(self):

        localctx = JavaParser.Interface_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_interface_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(JavaParser.INTERFACE)
            self.state = 799
            self.identifier()
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 800
                self.type_parameters()


            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 803
                self.match(JavaParser.EXTENDS)
                self.state = 804
                self.type_list()


            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 807
                self.match(JavaParser.PERMITS)
                self.state = 808
                self.type_list()


            self.state = 811
            self.interface_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK_S(self):
            return self.getToken(JavaParser.BLOCK_S, 0)

        def BLOCK_E(self):
            return self.getToken(JavaParser.BLOCK_E, 0)

        def interface_body_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Interface_body_declarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.Interface_body_declarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interface_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_body" ):
                listener.enterInterface_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_body" ):
                listener.exitInterface_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_body" ):
                return visitor.visitInterface_body(self)
            else:
                return visitor.visitChildren(self)




    def interface_body(self):

        localctx = JavaParser.Interface_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_interface_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(JavaParser.BLOCK_S)
            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -665791937992299) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -6917529027506864121) != 0):
                self.state = 814
                self.interface_body_declaration()
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 820
            self.match(JavaParser.BLOCK_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_type_or_voidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def VOID(self):
            return self.getToken(JavaParser.VOID, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_type_type_or_void

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_type_or_void" ):
                listener.enterType_type_or_void(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_type_or_void" ):
                listener.exitType_type_or_void(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_type_or_void" ):
                return visitor.visitType_type_or_void(self)
            else:
                return visitor.visitChildren(self)




    def type_type_or_void(self):

        localctx = JavaParser.Type_type_or_voidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_type_type_or_void)
        try:
            self.state = 824
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 8, 14, 20, 27, 29, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 126, 128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 822
                self.type_type()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.match(JavaParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_method_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_parameters(self):
            return self.getTypedRuleContext(JavaParser.Type_parametersContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(JavaParser.Method_declarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_generic_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_method_declaration" ):
                listener.enterGeneric_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_method_declaration" ):
                listener.exitGeneric_method_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneric_method_declaration" ):
                return visitor.visitGeneric_method_declaration(self)
            else:
                return visitor.visitChildren(self)




    def generic_method_declaration(self):

        localctx = JavaParser.Generic_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_generic_method_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.type_parameters()
            self.state = 827
            self.method_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_body_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_member_declaration(self):
            return self.getTypedRuleContext(JavaParser.Interface_member_declarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interface_body_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_body_declaration" ):
                listener.enterInterface_body_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_body_declaration" ):
                listener.exitInterface_body_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_body_declaration" ):
                return visitor.visitInterface_body_declaration(self)
            else:
                return visitor.visitChildren(self)




    def interface_body_declaration(self):

        localctx = JavaParser.Interface_body_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_interface_body_declaration)
        try:
            self.state = 837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 8, 9, 12, 14, 16, 18, 20, 27, 28, 29, 30, 33, 34, 35, 37, 38, 39, 42, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 92, 126, 128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 832
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 829
                        self.modifier() 
                    self.state = 834
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

                self.state = 835
                self.interface_member_declaration()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 836
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def const_declaration(self):
            return self.getTypedRuleContext(JavaParser.Const_declarationContext,0)


        def interface_method_declaration(self):
            return self.getTypedRuleContext(JavaParser.Interface_method_declarationContext,0)


        def generic_interface_method_declaration(self):
            return self.getTypedRuleContext(JavaParser.Generic_interface_method_declarationContext,0)


        def interface_declaration(self):
            return self.getTypedRuleContext(JavaParser.Interface_declarationContext,0)


        def annotation_type_declaration(self):
            return self.getTypedRuleContext(JavaParser.Annotation_type_declarationContext,0)


        def class_declaration(self):
            return self.getTypedRuleContext(JavaParser.Class_declarationContext,0)


        def enum_declaration(self):
            return self.getTypedRuleContext(JavaParser.Enum_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(JavaParser.Record_declarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interface_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_member_declaration" ):
                listener.enterInterface_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_member_declaration" ):
                listener.exitInterface_member_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_member_declaration" ):
                return visitor.visitInterface_member_declaration(self)
            else:
                return visitor.visitChildren(self)




    def interface_member_declaration(self):

        localctx = JavaParser.Interface_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_interface_member_declaration)
        try:
            self.state = 847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 839
                self.const_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 840
                self.interface_method_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 841
                self.generic_interface_method_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 842
                self.interface_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 843
                self.annotation_type_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 844
                self.class_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 845
                self.enum_declaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 846
                self.record_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def constant_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Constant_declaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.Constant_declaratorContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_const_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_declaration" ):
                listener.enterConst_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_declaration" ):
                listener.exitConst_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConst_declaration" ):
                return visitor.visitConst_declaration(self)
            else:
                return visitor.visitChildren(self)




    def const_declaration(self):

        localctx = JavaParser.Const_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_const_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.type_type()
            self.state = 850
            self.constant_declarator()
            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 851
                self.match(JavaParser.COMMA)
                self.state = 852
                self.constant_declarator()
                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 858
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(JavaParser.Variable_initializerContext,0)


        def ARRAY_S(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ARRAY_S)
            else:
                return self.getToken(JavaParser.ARRAY_S, i)

        def ARRAY_E(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ARRAY_E)
            else:
                return self.getToken(JavaParser.ARRAY_E, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constant_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarator" ):
                listener.enterConstant_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarator" ):
                listener.exitConstant_declarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_declarator" ):
                return visitor.visitConstant_declarator(self)
            else:
                return visitor.visitChildren(self)




    def constant_declarator(self):

        localctx = JavaParser.Constant_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_constant_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.identifier()
            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==74:
                self.state = 861
                self.match(JavaParser.ARRAY_S)
                self.state = 862
                self.match(JavaParser.ARRAY_E)
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 868
            self.match(JavaParser.ASSIGN)
            self.state = 869
            self.variable_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_method_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_common_body_declaration(self):
            return self.getTypedRuleContext(JavaParser.Interface_common_body_declarationContext,0)


        def interface_method_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Interface_method_modifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.Interface_method_modifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interface_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_method_declaration" ):
                listener.enterInterface_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_method_declaration" ):
                listener.exitInterface_method_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_method_declaration" ):
                return visitor.visitInterface_method_declaration(self)
            else:
                return visitor.visitChildren(self)




    def interface_method_declaration(self):

        localctx = JavaParser.Interface_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_interface_method_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 871
                    self.interface_method_modifier() 
                self.state = 876
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

            self.state = 877
            self.interface_common_body_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_method_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interface_method_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_method_modifier" ):
                listener.enterInterface_method_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_method_modifier" ):
                listener.exitInterface_method_modifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_method_modifier" ):
                return visitor.visitInterface_method_modifier(self)
            else:
                return visitor.visitChildren(self)




    def interface_method_modifier(self):

        localctx = JavaParser.Interface_method_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_interface_method_modifier)
        try:
            self.state = 885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 126, 128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 880
                self.match(JavaParser.PUBLIC)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 3)
                self.state = 881
                self.match(JavaParser.ABSTRACT)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 4)
                self.state = 882
                self.match(JavaParser.DEFAULT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 5)
                self.state = 883
                self.match(JavaParser.STATIC)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 6)
                self.state = 884
                self.match(JavaParser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_interface_method_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_parameters(self):
            return self.getTypedRuleContext(JavaParser.Type_parametersContext,0)


        def interface_common_body_declaration(self):
            return self.getTypedRuleContext(JavaParser.Interface_common_body_declarationContext,0)


        def interface_method_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Interface_method_modifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.Interface_method_modifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_generic_interface_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_interface_method_declaration" ):
                listener.enterGeneric_interface_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_interface_method_declaration" ):
                listener.exitGeneric_interface_method_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneric_interface_method_declaration" ):
                return visitor.visitGeneric_interface_method_declaration(self)
            else:
                return visitor.visitChildren(self)




    def generic_interface_method_declaration(self):

        localctx = JavaParser.Generic_interface_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_generic_interface_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -1125470410110975) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -6917529027641081855) != 0):
                self.state = 887
                self.interface_method_modifier()
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 893
            self.type_parameters()
            self.state = 894
            self.interface_common_body_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_common_body_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type_or_void(self):
            return self.getTypedRuleContext(JavaParser.Type_type_or_voidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formal_parameters(self):
            return self.getTypedRuleContext(JavaParser.Formal_parametersContext,0)


        def method_body(self):
            return self.getTypedRuleContext(JavaParser.Method_bodyContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def ARRAY_S(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ARRAY_S)
            else:
                return self.getToken(JavaParser.ARRAY_S, i)

        def ARRAY_E(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ARRAY_E)
            else:
                return self.getToken(JavaParser.ARRAY_E, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(JavaParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interface_common_body_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_common_body_declaration" ):
                listener.enterInterface_common_body_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_common_body_declaration" ):
                listener.exitInterface_common_body_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_common_body_declaration" ):
                return visitor.visitInterface_common_body_declaration(self)
            else:
                return visitor.visitChildren(self)




    def interface_common_body_declaration(self):

        localctx = JavaParser.Interface_common_body_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_interface_common_body_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 896
                    self.annotation() 
                self.state = 901
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

            self.state = 902
            self.type_type_or_void()
            self.state = 903
            self.identifier()
            self.state = 904
            self.formal_parameters()
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==74:
                self.state = 905
                self.match(JavaParser.ARRAY_S)
                self.state = 906
                self.match(JavaParser.ARRAY_E)
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 912
                self.match(JavaParser.THROWS)
                self.state = 913
                self.qualified_name_list()


            self.state = 916
            self.method_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def element_value(self):
            return self.getTypedRuleContext(JavaParser.Element_valueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_value" ):
                return visitor.visitDefault_value(self)
            else:
                return visitor.visitChildren(self)




    def default_value(self):

        localctx = JavaParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_default_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(JavaParser.DEFAULT)
            self.state = 919
            self.element_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alt_annotation_qualified_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_alt_annotation_qualified_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlt_annotation_qualified_name" ):
                listener.enterAlt_annotation_qualified_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlt_annotation_qualified_name" ):
                listener.exitAlt_annotation_qualified_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlt_annotation_qualified_name" ):
                return visitor.visitAlt_annotation_qualified_name(self)
            else:
                return visitor.visitChildren(self)




    def alt_annotation_qualified_name(self):

        localctx = JavaParser.Alt_annotation_qualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_alt_annotation_qualified_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==128:
                self.state = 921
                self.identifier()
                self.state = 922
                self.match(JavaParser.DOT)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 929
            self.match(JavaParser.AT)
            self.state = 930
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(JavaParser.Qualified_nameContext,0)


        def alt_annotation_qualified_name(self):
            return self.getTypedRuleContext(JavaParser.Alt_annotation_qualified_nameContext,0)


        def PAREN_S(self):
            return self.getToken(JavaParser.PAREN_S, 0)

        def PAREN_E(self):
            return self.getToken(JavaParser.PAREN_E, 0)

        def element_value_pairs(self):
            return self.getTypedRuleContext(JavaParser.Element_value_pairsContext,0)


        def element_value(self):
            return self.getTypedRuleContext(JavaParser.Element_valueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = JavaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 932
                self.match(JavaParser.AT)
                self.state = 933
                self.qualified_name()
                pass

            elif la_ == 2:
                self.state = 934
                self.alt_annotation_qualified_name()
                pass


            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 937
                self.match(JavaParser.PAREN_S)
                self.state = 940
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 938
                    self.element_value_pairs()

                elif la_ == 2:
                    self.state = 939
                    self.element_value()


                self.state = 942
                self.match(JavaParser.PAREN_E)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_value_pairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_value_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Element_value_pairContext)
            else:
                return self.getTypedRuleContext(JavaParser.Element_value_pairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_element_value_pairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_value_pairs" ):
                listener.enterElement_value_pairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_value_pairs" ):
                listener.exitElement_value_pairs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_value_pairs" ):
                return visitor.visitElement_value_pairs(self)
            else:
                return visitor.visitChildren(self)




    def element_value_pairs(self):

        localctx = JavaParser.Element_value_pairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_element_value_pairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.element_value_pair()
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 946
                self.match(JavaParser.COMMA)
                self.state = 947
                self.element_value_pair()
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_value_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def element_value(self):
            return self.getTypedRuleContext(JavaParser.Element_valueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_element_value_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_value_pair" ):
                listener.enterElement_value_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_value_pair" ):
                listener.exitElement_value_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_value_pair" ):
                return visitor.visitElement_value_pair(self)
            else:
                return visitor.visitChildren(self)




    def element_value_pair(self):

        localctx = JavaParser.Element_value_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_element_value_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.identifier()
            self.state = 954
            self.match(JavaParser.ASSIGN)
            self.state = 955
            self.element_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def element_value_array_initializer(self):
            return self.getTypedRuleContext(JavaParser.Element_value_array_initializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_element_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_value" ):
                listener.enterElement_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_value" ):
                listener.exitElement_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_value" ):
                return visitor.visitElement_value(self)
            else:
                return visitor.visitChildren(self)




    def element_value(self):

        localctx = JavaParser.Element_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_element_value)
        try:
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.annotation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 959
                self.element_value_array_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_value_array_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK_S(self):
            return self.getToken(JavaParser.BLOCK_S, 0)

        def BLOCK_E(self):
            return self.getToken(JavaParser.BLOCK_E, 0)

        def element_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Element_valueContext)
            else:
                return self.getTypedRuleContext(JavaParser.Element_valueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_element_value_array_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_value_array_initializer" ):
                listener.enterElement_value_array_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_value_array_initializer" ):
                listener.exitElement_value_array_initializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_value_array_initializer" ):
                return visitor.visitElement_value_array_initializer(self)
            else:
                return visitor.visitChildren(self)




    def element_value_array_initializer(self):

        localctx = JavaParser.Element_value_array_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_element_value_array_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(JavaParser.BLOCK_S)
            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 360288099068149701) != 0):
                self.state = 963
                self.element_value()
                self.state = 968
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 964
                        self.match(JavaParser.COMMA)
                        self.state = 965
                        self.element_value() 
                    self.state = 970
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,109,self._ctx)



            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 973
                self.match(JavaParser.COMMA)


            self.state = 976
            self.match(JavaParser.BLOCK_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_type_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation_type_body(self):
            return self.getTypedRuleContext(JavaParser.Annotation_type_bodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_type_declaration" ):
                listener.enterAnnotation_type_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_type_declaration" ):
                listener.exitAnnotation_type_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation_type_declaration" ):
                return visitor.visitAnnotation_type_declaration(self)
            else:
                return visitor.visitChildren(self)




    def annotation_type_declaration(self):

        localctx = JavaParser.Annotation_type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_annotation_type_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(JavaParser.AT)
            self.state = 979
            self.match(JavaParser.INTERFACE)
            self.state = 980
            self.identifier()
            self.state = 981
            self.annotation_type_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_type_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK_S(self):
            return self.getToken(JavaParser.BLOCK_S, 0)

        def BLOCK_E(self):
            return self.getToken(JavaParser.BLOCK_E, 0)

        def annotation_type_element_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Annotation_type_element_declarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.Annotation_type_element_declarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation_type_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_type_body" ):
                listener.enterAnnotation_type_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_type_body" ):
                listener.exitAnnotation_type_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation_type_body" ):
                return visitor.visitAnnotation_type_body(self)
            else:
                return visitor.visitChildren(self)




    def annotation_type_body(self):

        localctx = JavaParser.Annotation_type_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_annotation_type_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(JavaParser.BLOCK_S)
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -806529426349675) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -6917529027641081849) != 0):
                self.state = 984
                self.annotation_type_element_declaration()
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 990
            self.match(JavaParser.BLOCK_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_type_element_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation_type_element_rest(self):
            return self.getTypedRuleContext(JavaParser.Annotation_type_element_restContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotation_type_element_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_type_element_declaration" ):
                listener.enterAnnotation_type_element_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_type_element_declaration" ):
                listener.exitAnnotation_type_element_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation_type_element_declaration" ):
                return visitor.visitAnnotation_type_element_declaration(self)
            else:
                return visitor.visitChildren(self)




    def annotation_type_element_declaration(self):

        localctx = JavaParser.Annotation_type_element_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_annotation_type_element_declaration)
        try:
            self.state = 1000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 8, 9, 14, 16, 18, 20, 27, 28, 29, 30, 33, 34, 35, 37, 38, 39, 42, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 126, 128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 995
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 992
                        self.modifier() 
                    self.state = 997
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                self.state = 998
                self.annotation_type_element_rest()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 999
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_type_element_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def annotation_method_or_constant_rest(self):
            return self.getTypedRuleContext(JavaParser.Annotation_method_or_constant_restContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def class_declaration(self):
            return self.getTypedRuleContext(JavaParser.Class_declarationContext,0)


        def interface_declaration(self):
            return self.getTypedRuleContext(JavaParser.Interface_declarationContext,0)


        def enum_declaration(self):
            return self.getTypedRuleContext(JavaParser.Enum_declarationContext,0)


        def annotation_type_declaration(self):
            return self.getTypedRuleContext(JavaParser.Annotation_type_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(JavaParser.Record_declarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation_type_element_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_type_element_rest" ):
                listener.enterAnnotation_type_element_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_type_element_rest" ):
                listener.exitAnnotation_type_element_rest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation_type_element_rest" ):
                return visitor.visitAnnotation_type_element_rest(self)
            else:
                return visitor.visitChildren(self)




    def annotation_type_element_rest(self):

        localctx = JavaParser.Annotation_type_element_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_annotation_type_element_rest)
        try:
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1002
                self.type_type()
                self.state = 1003
                self.annotation_method_or_constant_rest()
                self.state = 1004
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1006
                self.class_declaration()
                self.state = 1008
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 1007
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1010
                self.interface_declaration()
                self.state = 1012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 1011
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1014
                self.enum_declaration()
                self.state = 1016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1015
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1018
                self.annotation_type_declaration()
                self.state = 1020
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 1019
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1022
                self.record_declaration()
                self.state = 1024
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1023
                    self.match(JavaParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_method_or_constant_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation_method_rest(self):
            return self.getTypedRuleContext(JavaParser.Annotation_method_restContext,0)


        def annotation_constant_rest(self):
            return self.getTypedRuleContext(JavaParser.Annotation_constant_restContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation_method_or_constant_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_method_or_constant_rest" ):
                listener.enterAnnotation_method_or_constant_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_method_or_constant_rest" ):
                listener.exitAnnotation_method_or_constant_rest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation_method_or_constant_rest" ):
                return visitor.visitAnnotation_method_or_constant_rest(self)
            else:
                return visitor.visitChildren(self)




    def annotation_method_or_constant_rest(self):

        localctx = JavaParser.Annotation_method_or_constant_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_annotation_method_or_constant_rest)
        try:
            self.state = 1030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1028
                self.annotation_method_rest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                self.annotation_constant_rest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_method_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def PAREN_S(self):
            return self.getToken(JavaParser.PAREN_S, 0)

        def PAREN_E(self):
            return self.getToken(JavaParser.PAREN_E, 0)

        def default_value(self):
            return self.getTypedRuleContext(JavaParser.Default_valueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation_method_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_method_rest" ):
                listener.enterAnnotation_method_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_method_rest" ):
                listener.exitAnnotation_method_rest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation_method_rest" ):
                return visitor.visitAnnotation_method_rest(self)
            else:
                return visitor.visitChildren(self)




    def annotation_method_rest(self):

        localctx = JavaParser.Annotation_method_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_annotation_method_rest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.identifier()
            self.state = 1033
            self.match(JavaParser.PAREN_S)
            self.state = 1034
            self.match(JavaParser.PAREN_E)
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1035
                self.default_value()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_constant_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarators(self):
            return self.getTypedRuleContext(JavaParser.Variable_declaratorsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation_constant_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_constant_rest" ):
                listener.enterAnnotation_constant_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_constant_rest" ):
                listener.exitAnnotation_constant_rest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation_constant_rest" ):
                return visitor.visitAnnotation_constant_rest(self)
            else:
                return visitor.visitChildren(self)




    def annotation_constant_rest(self):

        localctx = JavaParser.Annotation_constant_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_annotation_constant_rest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.variable_declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK_S(self):
            return self.getToken(JavaParser.BLOCK_S, 0)

        def BLOCK_E(self):
            return self.getToken(JavaParser.BLOCK_E, 0)

        def variable_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Variable_initializerContext)
            else:
                return self.getTypedRuleContext(JavaParser.Variable_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_array_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_initializer" ):
                listener.enterArray_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_initializer" ):
                listener.exitArray_initializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_initializer" ):
                return visitor.visitArray_initializer(self)
            else:
                return visitor.visitChildren(self)




    def array_initializer(self):

        localctx = JavaParser.Array_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_array_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(JavaParser.BLOCK_S)
            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 360288099068149701) != 0):
                self.state = 1041
                self.variable_initializer()
                self.state = 1046
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1042
                        self.match(JavaParser.COMMA)
                        self.state = 1043
                        self.variable_initializer() 
                    self.state = 1048
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

                self.state = 1050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 1049
                    self.match(JavaParser.COMMA)




            self.state = 1054
            self.match(JavaParser.BLOCK_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK_S(self):
            return self.getToken(JavaParser.BLOCK_S, 0)

        def BLOCK_E(self):
            return self.getToken(JavaParser.BLOCK_E, 0)

        def block_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Block_statementContext)
            else:
                return self.getTypedRuleContext(JavaParser.Block_statementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = JavaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(JavaParser.BLOCK_S)
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -334254282492513) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -6917524903528761177) != 0):
                self.state = 1057
                self.block_statement()
                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1063
            self.match(JavaParser.BLOCK_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(JavaParser.Local_variable_declarationContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def local_type_declaration(self):
            return self.getTypedRuleContext(JavaParser.Local_type_declarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_block_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_statement" ):
                listener.enterBlock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_statement" ):
                listener.exitBlock_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock_statement" ):
                return visitor.visitBlock_statement(self)
            else:
                return visitor.visitChildren(self)




    def block_statement(self):

        localctx = JavaParser.Block_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_block_statement)
        try:
            self.state = 1070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1065
                self.local_variable_declaration()
                self.state = 1066
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1068
                self.local_type_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1069
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def variable_declarators(self):
            return self.getTypedRuleContext(JavaParser.Variable_declaratorsContext,0)


        def variable_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Variable_modifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.Variable_modifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_local_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declaration" ):
                listener.enterLocal_variable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declaration" ):
                listener.exitLocal_variable_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocal_variable_declaration" ):
                return visitor.visitLocal_variable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def local_variable_declaration(self):

        localctx = JavaParser.Local_variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_local_variable_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1072
                    self.variable_modifier() 
                self.state = 1077
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

            self.state = 1086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1078
                self.match(JavaParser.VAR)
                self.state = 1079
                self.identifier()
                self.state = 1080
                self.match(JavaParser.ASSIGN)
                self.state = 1081
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1083
                self.type_type()
                self.state = 1084
                self.variable_declarators()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.blockLabel = None # BlockContext
            self.statementExpression = None # ExpressionContext
            self.identifierLabel = None # IdentifierContext

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def ASSERT(self):
            return self.getToken(JavaParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def IF(self):
            return self.getToken(JavaParser.IF, 0)

        def par_expression(self):
            return self.getTypedRuleContext(JavaParser.Par_expressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(JavaParser.ELSE, 0)

        def FOR(self):
            return self.getToken(JavaParser.FOR, 0)

        def PAREN_S(self):
            return self.getToken(JavaParser.PAREN_S, 0)

        def for_control(self):
            return self.getTypedRuleContext(JavaParser.For_controlContext,0)


        def PAREN_E(self):
            return self.getToken(JavaParser.PAREN_E, 0)

        def WHILE(self):
            return self.getToken(JavaParser.WHILE, 0)

        def DO(self):
            return self.getToken(JavaParser.DO, 0)

        def TRY(self):
            return self.getToken(JavaParser.TRY, 0)

        def finally_block(self):
            return self.getTypedRuleContext(JavaParser.Finally_blockContext,0)


        def catch_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Catch_clauseContext)
            else:
                return self.getTypedRuleContext(JavaParser.Catch_clauseContext,i)


        def resource_specification(self):
            return self.getTypedRuleContext(JavaParser.Resource_specificationContext,0)


        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def BLOCK_S(self):
            return self.getToken(JavaParser.BLOCK_S, 0)

        def BLOCK_E(self):
            return self.getToken(JavaParser.BLOCK_E, 0)

        def switch_block_statement_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Switch_block_statement_groupContext)
            else:
                return self.getTypedRuleContext(JavaParser.Switch_block_statement_groupContext,i)


        def switch_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Switch_labelContext)
            else:
                return self.getTypedRuleContext(JavaParser.Switch_labelContext,i)


        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def RETURN(self):
            return self.getToken(JavaParser.RETURN, 0)

        def THROW(self):
            return self.getToken(JavaParser.THROW, 0)

        def BREAK(self):
            return self.getToken(JavaParser.BREAK, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def CONTINUE(self):
            return self.getToken(JavaParser.CONTINUE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def switch_expression(self):
            return self.getTypedRuleContext(JavaParser.Switch_expressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = JavaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1088
                localctx.blockLabel = self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1089
                self.match(JavaParser.ASSERT)
                self.state = 1090
                self.expression(0)
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 1091
                    self.match(JavaParser.COLON)
                    self.state = 1092
                    self.expression(0)


                self.state = 1095
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1097
                self.match(JavaParser.IF)
                self.state = 1098
                self.par_expression()
                self.state = 1099
                self.statement()
                self.state = 1102
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1100
                    self.match(JavaParser.ELSE)
                    self.state = 1101
                    self.statement()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1104
                self.match(JavaParser.FOR)
                self.state = 1105
                self.match(JavaParser.PAREN_S)
                self.state = 1106
                self.for_control()
                self.state = 1107
                self.match(JavaParser.PAREN_E)
                self.state = 1108
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1110
                self.match(JavaParser.WHILE)
                self.state = 1111
                self.par_expression()
                self.state = 1112
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1114
                self.match(JavaParser.DO)
                self.state = 1115
                self.statement()
                self.state = 1116
                self.match(JavaParser.WHILE)
                self.state = 1117
                self.par_expression()
                self.state = 1118
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1120
                self.match(JavaParser.TRY)
                self.state = 1121
                self.block()
                self.state = 1131
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7]:
                    self.state = 1123 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1122
                        self.catch_clause()
                        self.state = 1125 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==7):
                            break

                    self.state = 1128
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==19:
                        self.state = 1127
                        self.finally_block()


                    pass
                elif token in [19]:
                    self.state = 1130
                    self.finally_block()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1133
                self.match(JavaParser.TRY)
                self.state = 1134
                self.resource_specification()
                self.state = 1135
                self.block()
                self.state = 1139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 1136
                    self.catch_clause()
                    self.state = 1141
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 1142
                    self.finally_block()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1145
                self.match(JavaParser.SWITCH)
                self.state = 1146
                self.par_expression()
                self.state = 1147
                self.match(JavaParser.BLOCK_S)
                self.state = 1151
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1148
                        self.switch_block_statement_group() 
                    self.state = 1153
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==6 or _la==12:
                    self.state = 1154
                    self.switch_label()
                    self.state = 1159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1160
                self.match(JavaParser.BLOCK_E)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1162
                self.match(JavaParser.SYNCHRONIZED)
                self.state = 1163
                self.par_expression()
                self.state = 1164
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1166
                self.match(JavaParser.RETURN)
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 360288099068149697) != 0):
                    self.state = 1167
                    self.expression(0)


                self.state = 1170
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1171
                self.match(JavaParser.THROW)
                self.state = 1172
                self.expression(0)
                self.state = 1173
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1175
                self.match(JavaParser.BREAK)
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==128:
                    self.state = 1176
                    self.identifier()


                self.state = 1179
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1180
                self.match(JavaParser.CONTINUE)
                self.state = 1182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==128:
                    self.state = 1181
                    self.identifier()


                self.state = 1184
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1185
                self.match(JavaParser.YIELD)
                self.state = 1186
                self.expression(0)
                self.state = 1187
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1189
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1190
                localctx.statementExpression = self.expression(0)
                self.state = 1191
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1193
                self.switch_expression()
                self.state = 1195
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                if la_ == 1:
                    self.state = 1194
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1197
                localctx.identifierLabel = self.identifier()
                self.state = 1198
                self.match(JavaParser.COLON)
                self.state = 1199
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_rule_outcomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def block_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Block_statementContext)
            else:
                return self.getTypedRuleContext(JavaParser.Block_statementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switch_rule_outcome

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_rule_outcome" ):
                listener.enterSwitch_rule_outcome(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_rule_outcome" ):
                listener.exitSwitch_rule_outcome(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_rule_outcome" ):
                return visitor.visitSwitch_rule_outcome(self)
            else:
                return visitor.visitChildren(self)




    def switch_rule_outcome(self):

        localctx = JavaParser.Switch_rule_outcomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_switch_rule_outcome)
        self._la = 0 # Token type
        try:
            self.state = 1210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1203
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -334254282492513) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -6917524903528761177) != 0):
                    self.state = 1204
                    self.block_statement()
                    self.state = 1209
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_block_statement_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Switch_labelContext)
            else:
                return self.getTypedRuleContext(JavaParser.Switch_labelContext,i)


        def block_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Block_statementContext)
            else:
                return self.getTypedRuleContext(JavaParser.Block_statementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switch_block_statement_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_block_statement_group" ):
                listener.enterSwitch_block_statement_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_block_statement_group" ):
                listener.exitSwitch_block_statement_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_block_statement_group" ):
                return visitor.visitSwitch_block_statement_group(self)
            else:
                return visitor.visitChildren(self)




    def switch_block_statement_group(self):

        localctx = JavaParser.Switch_block_statement_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_switch_block_statement_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1212
                self.switch_label()
                self.state = 1215 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==6 or _la==12):
                    break

            self.state = 1218 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1217
                self.block_statement()
                self.state = 1220 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -334254282492513) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -6917524903528761177) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constantExpression = None # ExpressionContext
            self.enumConstantName = None # Token
            self.varName = None # IdentifierContext

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switch_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_label" ):
                listener.enterSwitch_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_label" ):
                listener.exitSwitch_label(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_label" ):
                return visitor.visitSwitch_label(self)
            else:
                return visitor.visitChildren(self)




    def switch_label(self):

        localctx = JavaParser.Switch_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_switch_label)
        try:
            self.state = 1233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1222
                self.match(JavaParser.CASE)
                self.state = 1228
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 1223
                    localctx.constantExpression = self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 1224
                    localctx.enumConstantName = self.match(JavaParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 1225
                    self.type_type()
                    self.state = 1226
                    localctx.varName = self.identifier()
                    pass


                self.state = 1230
                self.match(JavaParser.COLON)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1231
                self.match(JavaParser.DEFAULT)
                self.state = 1232
                self.match(JavaParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(JavaParser.Local_variable_declarationContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(JavaParser.Expression_listContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_for_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_init" ):
                listener.enterFor_init(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_init" ):
                listener.exitFor_init(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_init" ):
                return visitor.visitFor_init(self)
            else:
                return visitor.visitChildren(self)




    def for_init(self):

        localctx = JavaParser.For_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_for_init)
        try:
            self.state = 1237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1235
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1236
                self.expression_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_controlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.forUpdate = None # Expression_listContext

        def enhanced_for_control(self):
            return self.getTypedRuleContext(JavaParser.Enhanced_for_controlContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def for_init(self):
            return self.getTypedRuleContext(JavaParser.For_initContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(JavaParser.Expression_listContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_for_control

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_control" ):
                listener.enterFor_control(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_control" ):
                listener.exitFor_control(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_control" ):
                return visitor.visitFor_control(self)
            else:
                return visitor.visitChildren(self)




    def for_control(self):

        localctx = JavaParser.For_controlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_for_control)
        self._la = 0 # Token type
        try:
            self.state = 1251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1239
                self.enhanced_for_control()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610998821) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 360288099068149697) != 0):
                    self.state = 1240
                    self.for_init()


                self.state = 1243
                self.match(JavaParser.SEMI)
                self.state = 1245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 360288099068149697) != 0):
                    self.state = 1244
                    self.expression(0)


                self.state = 1247
                self.match(JavaParser.SEMI)
                self.state = 1249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 360288099068149697) != 0):
                    self.state = 1248
                    localctx.forUpdate = self.expression_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enhanced_for_controlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarator_id(self):
            return self.getTypedRuleContext(JavaParser.Variable_declarator_idContext,0)


        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def variable_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Variable_modifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.Variable_modifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enhanced_for_control

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhanced_for_control" ):
                listener.enterEnhanced_for_control(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhanced_for_control" ):
                listener.exitEnhanced_for_control(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnhanced_for_control" ):
                return visitor.visitEnhanced_for_control(self)
            else:
                return visitor.visitChildren(self)




    def enhanced_for_control(self):

        localctx = JavaParser.Enhanced_for_controlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_enhanced_for_control)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1253
                    self.variable_modifier() 
                self.state = 1258
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

            self.state = 1261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1259
                self.type_type()
                pass

            elif la_ == 2:
                self.state = 1260
                self.match(JavaParser.VAR)
                pass


            self.state = 1263
            self.variable_declarator_id()
            self.state = 1264
            self.match(JavaParser.COLON)
            self.state = 1265
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(JavaParser.CATCH, 0)

        def PAREN_S(self):
            return self.getToken(JavaParser.PAREN_S, 0)

        def catch_type(self):
            return self.getTypedRuleContext(JavaParser.Catch_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def PAREN_E(self):
            return self.getToken(JavaParser.PAREN_E, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def variable_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Variable_modifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.Variable_modifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_clause" ):
                listener.enterCatch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_clause" ):
                listener.exitCatch_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatch_clause" ):
                return visitor.visitCatch_clause(self)
            else:
                return visitor.visitChildren(self)




    def catch_clause(self):

        localctx = JavaParser.Catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_catch_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(JavaParser.CATCH)
            self.state = 1268
            self.match(JavaParser.PAREN_S)
            self.state = 1272
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1269
                    self.variable_modifier() 
                self.state = 1274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

            self.state = 1275
            self.catch_type()
            self.state = 1276
            self.identifier()
            self.state = 1277
            self.match(JavaParser.PAREN_E)
            self.state = 1278
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Qualified_nameContext)
            else:
                return self.getTypedRuleContext(JavaParser.Qualified_nameContext,i)


        def BITOR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITOR)
            else:
                return self.getToken(JavaParser.BITOR, i)

        def getRuleIndex(self):
            return JavaParser.RULE_catch_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_type" ):
                listener.enterCatch_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_type" ):
                listener.exitCatch_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatch_type" ):
                return visitor.visitCatch_type(self)
            else:
                return visitor.visitChildren(self)




    def catch_type(self):

        localctx = JavaParser.Catch_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_catch_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.qualified_name()
            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==110:
                self.state = 1281
                self.match(JavaParser.BITOR)
                self.state = 1282
                self.qualified_name()
                self.state = 1287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(JavaParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_finally_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_block" ):
                listener.enterFinally_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_block" ):
                listener.exitFinally_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinally_block" ):
                return visitor.visitFinally_block(self)
            else:
                return visitor.visitChildren(self)




    def finally_block(self):

        localctx = JavaParser.Finally_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_finally_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.match(JavaParser.FINALLY)
            self.state = 1289
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Resource_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAREN_S(self):
            return self.getToken(JavaParser.PAREN_S, 0)

        def resources(self):
            return self.getTypedRuleContext(JavaParser.ResourcesContext,0)


        def PAREN_E(self):
            return self.getToken(JavaParser.PAREN_E, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_resource_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_specification" ):
                listener.enterResource_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_specification" ):
                listener.exitResource_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource_specification" ):
                return visitor.visitResource_specification(self)
            else:
                return visitor.visitChildren(self)




    def resource_specification(self):

        localctx = JavaParser.Resource_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_resource_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(JavaParser.PAREN_S)
            self.state = 1292
            self.resources()
            self.state = 1294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 1293
                self.match(JavaParser.SEMI)


            self.state = 1296
            self.match(JavaParser.PAREN_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ResourceContext)
            else:
                return self.getTypedRuleContext(JavaParser.ResourceContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def getRuleIndex(self):
            return JavaParser.RULE_resources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResources" ):
                listener.enterResources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResources" ):
                listener.exitResources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResources" ):
                return visitor.visitResources(self)
            else:
                return visitor.visitChildren(self)




    def resources(self):

        localctx = JavaParser.ResourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_resources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.resource()
            self.state = 1303
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1299
                    self.match(JavaParser.SEMI)
                    self.state = 1300
                    self.resource() 
                self.state = 1305
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def class_or_interface_type(self):
            return self.getTypedRuleContext(JavaParser.Class_or_interface_typeContext,0)


        def variable_declarator_id(self):
            return self.getTypedRuleContext(JavaParser.Variable_declarator_idContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variable_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Variable_modifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.Variable_modifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = JavaParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_resource)
        try:
            self.state = 1323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1309
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1306
                        self.variable_modifier() 
                    self.state = 1311
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

                self.state = 1317
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1312
                    self.class_or_interface_type()
                    self.state = 1313
                    self.variable_declarator_id()
                    pass

                elif la_ == 2:
                    self.state = 1315
                    self.match(JavaParser.VAR)
                    self.state = 1316
                    self.identifier()
                    pass


                self.state = 1319
                self.match(JavaParser.ASSIGN)
                self.state = 1320
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1322
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variable_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Variable_modifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.Variable_modifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = JavaParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1325
                    self.variable_modifier() 
                self.state = 1330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

            self.state = 1331
            self.type_type()
            self.state = 1335
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1332
                    self.annotation() 
                self.state = 1337
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

            self.state = 1338
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAREN_S(self):
            return self.getToken(JavaParser.PAREN_S, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def PAREN_E(self):
            return self.getToken(JavaParser.PAREN_E, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def literal(self):
            return self.getTypedRuleContext(JavaParser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def type_type_or_void(self):
            return self.getTypedRuleContext(JavaParser.Type_type_or_voidContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def non_wildcard_type_arguments(self):
            return self.getTypedRuleContext(JavaParser.Non_wildcard_type_argumentsContext,0)


        def explicit_generic_invocation_suffix(self):
            return self.getTypedRuleContext(JavaParser.Explicit_generic_invocation_suffixContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = JavaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_primary)
        try:
            self.state = 1358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1340
                self.match(JavaParser.PAREN_S)
                self.state = 1341
                self.expression(0)
                self.state = 1342
                self.match(JavaParser.PAREN_E)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1344
                self.match(JavaParser.THIS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1345
                self.match(JavaParser.SUPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1346
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1347
                self.identifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1348
                self.type_type_or_void()
                self.state = 1349
                self.match(JavaParser.DOT)
                self.state = 1350
                self.match(JavaParser.CLASS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1352
                self.non_wildcard_type_arguments()
                self.state = 1356
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [40, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 128]:
                    self.state = 1353
                    self.explicit_generic_invocation_suffix()
                    pass
                elif token in [43]:
                    self.state = 1354
                    self.match(JavaParser.THIS)
                    self.state = 1355
                    self.arguments()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(JavaParser.Integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(JavaParser.Float_literalContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(JavaParser.CHAR_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(JavaParser.STRING_LITERAL, 0)

        def BOOL_LITERAL(self):
            return self.getToken(JavaParser.BOOL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def TEXT_BLOCK(self):
            return self.getToken(JavaParser.TEXT_BLOCK, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = JavaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_literal)
        try:
            self.state = 1367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76, 77, 78, 79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1360
                self.integer_literal()
                pass
            elif token in [80, 81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1361
                self.float_literal()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1362
                self.match(JavaParser.CHAR_LITERAL)
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1363
                self.match(JavaParser.STRING_LITERAL)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1364
                self.match(JavaParser.BOOL_LITERAL)
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1365
                self.match(JavaParser.NULL_LITERAL)
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1366
                self.match(JavaParser.TEXT_BLOCK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(JavaParser.DECIMAL_LITERAL, 0)

        def HEX_LITERAL(self):
            return self.getToken(JavaParser.HEX_LITERAL, 0)

        def OCT_LITERAL(self):
            return self.getToken(JavaParser.OCT_LITERAL, 0)

        def BINARY_LITERAL(self):
            return self.getToken(JavaParser.BINARY_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_literal" ):
                listener.enterInteger_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_literal" ):
                listener.exitInteger_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger_literal" ):
                return visitor.visitInteger_literal(self)
            else:
                return visitor.visitChildren(self)




    def integer_literal(self):

        localctx = JavaParser.Integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_integer_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            _la = self._input.LA(1)
            if not(((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(JavaParser.FLOAT_LITERAL, 0)

        def HEX_FLOAT_LITERAL(self):
            return self.getToken(JavaParser.HEX_FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_float_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_literal" ):
                listener.enterFloat_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_literal" ):
                listener.exitFloat_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloat_literal" ):
                return visitor.visitFloat_literal(self)
            else:
                return visitor.visitChildren(self)




    def float_literal(self):

        localctx = JavaParser.Float_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_float_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            _la = self._input.LA(1)
            if not(_la==80 or _la==81):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_arguments_or_diamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def type_arguments(self):
            return self.getTypedRuleContext(JavaParser.Type_argumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_type_arguments_or_diamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_arguments_or_diamond" ):
                listener.enterType_arguments_or_diamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_arguments_or_diamond" ):
                listener.exitType_arguments_or_diamond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_arguments_or_diamond" ):
                return visitor.visitType_arguments_or_diamond(self)
            else:
                return visitor.visitChildren(self)




    def type_arguments_or_diamond(self):

        localctx = JavaParser.Type_arguments_or_diamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_type_arguments_or_diamond)
        try:
            self.state = 1376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1373
                self.match(JavaParser.LT)
                self.state = 1374
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1375
                self.type_arguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.prefix = None # Token
            self.bop = None # Token
            self.postfix = None # Token

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext,0)


        def method_call(self):
            return self.getTypedRuleContext(JavaParser.Method_callContext,0)


        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)

        def creator(self):
            return self.getTypedRuleContext(JavaParser.CreatorContext,0)


        def PAREN_S(self):
            return self.getToken(JavaParser.PAREN_S, 0)

        def type_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Type_typeContext)
            else:
                return self.getTypedRuleContext(JavaParser.Type_typeContext,i)


        def PAREN_E(self):
            return self.getToken(JavaParser.PAREN_E, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)

        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)

        def UNN_INC(self):
            return self.getToken(JavaParser.UNN_INC, 0)

        def UNN_DEC(self):
            return self.getToken(JavaParser.UNN_DEC, 0)

        def TILDE(self):
            return self.getToken(JavaParser.TILDE, 0)

        def LOG_NOT(self):
            return self.getToken(JavaParser.LOG_NOT, 0)

        def switch_expression(self):
            return self.getTypedRuleContext(JavaParser.Switch_expressionContext,0)


        def COLONCOLON(self):
            return self.getToken(JavaParser.COLONCOLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def type_arguments(self):
            return self.getTypedRuleContext(JavaParser.Type_argumentsContext,0)


        def class_type(self):
            return self.getTypedRuleContext(JavaParser.Class_typeContext,0)


        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def DIV(self):
            return self.getToken(JavaParser.DIV, 0)

        def MOD(self):
            return self.getToken(JavaParser.MOD, 0)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LT)
            else:
                return self.getToken(JavaParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.GT)
            else:
                return self.getToken(JavaParser.GT, i)

        def LE(self):
            return self.getToken(JavaParser.LE, 0)

        def GE(self):
            return self.getToken(JavaParser.GE, 0)

        def EQUAL(self):
            return self.getToken(JavaParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(JavaParser.NOTEQUAL, 0)

        def CARET(self):
            return self.getToken(JavaParser.CARET, 0)

        def BITOR(self):
            return self.getToken(JavaParser.BITOR, 0)

        def LOG_AND(self):
            return self.getToken(JavaParser.LOG_AND, 0)

        def LOG_OR(self):
            return self.getToken(JavaParser.LOG_OR, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def ADD_ASS(self):
            return self.getToken(JavaParser.ADD_ASS, 0)

        def SUB_ASS(self):
            return self.getToken(JavaParser.SUB_ASS, 0)

        def MUL_ASS(self):
            return self.getToken(JavaParser.MUL_ASS, 0)

        def DIV_ASS(self):
            return self.getToken(JavaParser.DIV_ASS, 0)

        def AND_ASS(self):
            return self.getToken(JavaParser.AND_ASS, 0)

        def OR_ASS(self):
            return self.getToken(JavaParser.OR_ASS, 0)

        def XOR_ASS(self):
            return self.getToken(JavaParser.XOR_ASS, 0)

        def RSHIFT_ASS(self):
            return self.getToken(JavaParser.RSHIFT_ASS, 0)

        def URSHIFT_ASS(self):
            return self.getToken(JavaParser.URSHIFT_ASS, 0)

        def LSHIFT_ASS(self):
            return self.getToken(JavaParser.LSHIFT_ASS, 0)

        def MOD_ASS(self):
            return self.getToken(JavaParser.MOD_ASS, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def inner_creator(self):
            return self.getTypedRuleContext(JavaParser.Inner_creatorContext,0)


        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def super_suffix(self):
            return self.getTypedRuleContext(JavaParser.Super_suffixContext,0)


        def explicit_generic_invocation(self):
            return self.getTypedRuleContext(JavaParser.Explicit_generic_invocationContext,0)


        def non_wildcard_type_arguments(self):
            return self.getTypedRuleContext(JavaParser.Non_wildcard_type_argumentsContext,0)


        def ARRAY_S(self):
            return self.getToken(JavaParser.ARRAY_S, 0)

        def ARRAY_E(self):
            return self.getToken(JavaParser.ARRAY_E, 0)

        def INSTANCEOF(self):
            return self.getToken(JavaParser.INSTANCEOF, 0)

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 208
        self.enterRecursionRule(localctx, 208, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1379
                self.primary()
                pass

            elif la_ == 2:
                self.state = 1380
                self.method_call()
                pass

            elif la_ == 3:
                self.state = 1381
                self.match(JavaParser.NEW)
                self.state = 1382
                self.creator()
                pass

            elif la_ == 4:
                self.state = 1383
                self.match(JavaParser.PAREN_S)
                self.state = 1387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1384
                        self.annotation() 
                    self.state = 1389
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

                self.state = 1390
                self.type_type()
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==109:
                    self.state = 1391
                    self.match(JavaParser.BITAND)
                    self.state = 1392
                    self.type_type()
                    self.state = 1397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1398
                self.match(JavaParser.PAREN_E)
                self.state = 1399
                self.expression(21)
                pass

            elif la_ == 5:
                self.state = 1401
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & 15) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1402
                self.expression(19)
                pass

            elif la_ == 6:
                self.state = 1403
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==93 or _la==94):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1404
                self.expression(18)
                pass

            elif la_ == 7:
                self.state = 1405
                self.switch_expression()
                pass

            elif la_ == 8:
                self.state = 1406
                self.type_type()
                self.state = 1407
                self.match(JavaParser.COLONCOLON)
                self.state = 1413
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 92, 128]:
                    self.state = 1409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==92:
                        self.state = 1408
                        self.type_arguments()


                    self.state = 1411
                    self.identifier()
                    pass
                elif token in [31]:
                    self.state = 1412
                    self.match(JavaParser.NEW)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1415
                self.class_type()
                self.state = 1416
                self.match(JavaParser.COLONCOLON)
                self.state = 1418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1417
                    self.type_arguments()


                self.state = 1420
                self.match(JavaParser.NEW)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1507
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1505
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                    if la_ == 1:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1424
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1425
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 35) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1426
                        self.expression(18)
                        pass

                    elif la_ == 2:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1427
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1428
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==105 or _la==106):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1429
                        self.expression(17)
                        pass

                    elif la_ == 3:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1430
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1438
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                        if la_ == 1:
                            self.state = 1431
                            self.match(JavaParser.LT)
                            self.state = 1432
                            self.match(JavaParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 1433
                            self.match(JavaParser.GT)
                            self.state = 1434
                            self.match(JavaParser.GT)
                            self.state = 1435
                            self.match(JavaParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1436
                            self.match(JavaParser.GT)
                            self.state = 1437
                            self.match(JavaParser.GT)
                            pass


                        self.state = 1440
                        self.expression(16)
                        pass

                    elif la_ == 4:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1441
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1442
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 387) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1443
                        self.expression(15)
                        pass

                    elif la_ == 5:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1444
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1445
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==97 or _la==100):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1446
                        self.expression(13)
                        pass

                    elif la_ == 6:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1447
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1448
                        localctx.bop = self.match(JavaParser.BITAND)
                        self.state = 1449
                        self.expression(12)
                        pass

                    elif la_ == 7:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1450
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1451
                        localctx.bop = self.match(JavaParser.CARET)
                        self.state = 1452
                        self.expression(11)
                        pass

                    elif la_ == 8:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1453
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1454
                        localctx.bop = self.match(JavaParser.BITOR)
                        self.state = 1455
                        self.expression(10)
                        pass

                    elif la_ == 9:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1456
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1457
                        localctx.bop = self.match(JavaParser.LOG_AND)
                        self.state = 1458
                        self.expression(9)
                        pass

                    elif la_ == 10:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1459
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1460
                        localctx.bop = self.match(JavaParser.LOG_OR)
                        self.state = 1461
                        self.expression(8)
                        pass

                    elif la_ == 11:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1462
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1463
                        localctx.bop = self.match(JavaParser.QUESTION)
                        self.state = 1464
                        self.expression(0)
                        self.state = 1465
                        self.match(JavaParser.COLON)
                        self.state = 1466
                        self.expression(6)
                        pass

                    elif la_ == 12:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1468
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1469
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 17171480577) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1470
                        self.expression(5)
                        pass

                    elif la_ == 13:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1471
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1472
                        localctx.bop = self.match(JavaParser.DOT)
                        self.state = 1484
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                        if la_ == 1:
                            self.state = 1473
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 1474
                            self.method_call()
                            pass

                        elif la_ == 3:
                            self.state = 1475
                            self.match(JavaParser.THIS)
                            pass

                        elif la_ == 4:
                            self.state = 1476
                            self.match(JavaParser.NEW)
                            self.state = 1478
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==92:
                                self.state = 1477
                                self.non_wildcard_type_arguments()


                            self.state = 1480
                            self.inner_creator()
                            pass

                        elif la_ == 5:
                            self.state = 1481
                            self.match(JavaParser.SUPER)
                            self.state = 1482
                            self.super_suffix()
                            pass

                        elif la_ == 6:
                            self.state = 1483
                            self.explicit_generic_invocation()
                            pass


                        pass

                    elif la_ == 14:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1486
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1487
                        self.match(JavaParser.ARRAY_S)
                        self.state = 1488
                        self.expression(0)
                        self.state = 1489
                        self.match(JavaParser.ARRAY_E)
                        pass

                    elif la_ == 15:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1491
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1492
                        localctx.postfix = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==103 or _la==104):
                            localctx.postfix = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 16:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1493
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1494
                        localctx.bop = self.match(JavaParser.INSTANCEOF)
                        self.state = 1497
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                        if la_ == 1:
                            self.state = 1495
                            self.type_type()
                            pass

                        elif la_ == 2:
                            self.state = 1496
                            self.pattern()
                            pass


                        pass

                    elif la_ == 17:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1499
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1500
                        self.match(JavaParser.COLONCOLON)
                        self.state = 1502
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==92:
                            self.state = 1501
                            self.type_arguments()


                        self.state = 1504
                        self.identifier()
                        pass

             
                self.state = 1509
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Switch_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def par_expression(self):
            return self.getTypedRuleContext(JavaParser.Par_expressionContext,0)


        def BLOCK_S(self):
            return self.getToken(JavaParser.BLOCK_S, 0)

        def BLOCK_E(self):
            return self.getToken(JavaParser.BLOCK_E, 0)

        def switch_labeled_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Switch_labeled_ruleContext)
            else:
                return self.getTypedRuleContext(JavaParser.Switch_labeled_ruleContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switch_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression" ):
                listener.enterSwitch_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression" ):
                listener.exitSwitch_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_expression" ):
                return visitor.visitSwitch_expression(self)
            else:
                return visitor.visitChildren(self)




    def switch_expression(self):

        localctx = JavaParser.Switch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_switch_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.match(JavaParser.SWITCH)
            self.state = 1511
            self.par_expression()
            self.state = 1512
            self.match(JavaParser.BLOCK_S)
            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6 or _la==12:
                self.state = 1513
                self.switch_labeled_rule()
                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1519
            self.match(JavaParser.BLOCK_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_labeled_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def switch_rule_outcome(self):
            return self.getTypedRuleContext(JavaParser.Switch_rule_outcomeContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expression_list(self):
            return self.getTypedRuleContext(JavaParser.Expression_listContext,0)


        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def guarded_pattern(self):
            return self.getTypedRuleContext(JavaParser.Guarded_patternContext,0)


        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switch_labeled_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_labeled_rule" ):
                listener.enterSwitch_labeled_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_labeled_rule" ):
                listener.exitSwitch_labeled_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_labeled_rule" ):
                return visitor.visitSwitch_labeled_rule(self)
            else:
                return visitor.visitChildren(self)




    def switch_labeled_rule(self):

        localctx = JavaParser.Switch_labeled_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_switch_labeled_rule)
        self._la = 0 # Token type
        try:
            self.state = 1532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1521
                self.match(JavaParser.CASE)
                self.state = 1525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1522
                    self.expression_list()
                    pass

                elif la_ == 2:
                    self.state = 1523
                    self.match(JavaParser.NULL_LITERAL)
                    pass

                elif la_ == 3:
                    self.state = 1524
                    self.guarded_pattern(0)
                    pass


                self.state = 1527
                _la = self._input.LA(1)
                if not(_la==96 or _la==124):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1528
                self.switch_rule_outcome()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1529
                self.match(JavaParser.DEFAULT)
                self.state = 1530
                _la = self._input.LA(1)
                if not(_la==96 or _la==124):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1531
                self.switch_rule_outcome()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Qualified_nameContext)
            else:
                return self.getTypedRuleContext(JavaParser.Qualified_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualified_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_name_list" ):
                listener.enterQualified_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_name_list" ):
                listener.exitQualified_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualified_name_list" ):
                return visitor.visitQualified_name_list(self)
            else:
                return visitor.visitChildren(self)




    def qualified_name_list(self):

        localctx = JavaParser.Qualified_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_qualified_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            self.qualified_name()
            self.state = 1539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 1535
                self.match(JavaParser.COMMA)
                self.state = 1536
                self.qualified_name()
                self.state = 1541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_formal_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def ELLIPSIS(self):
            return self.getToken(JavaParser.ELLIPSIS, 0)

        def variable_declarator_id(self):
            return self.getTypedRuleContext(JavaParser.Variable_declarator_idContext,0)


        def variable_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Variable_modifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.Variable_modifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_last_formal_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_formal_parameter" ):
                listener.enterLast_formal_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_formal_parameter" ):
                listener.exitLast_formal_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLast_formal_parameter" ):
                return visitor.visitLast_formal_parameter(self)
            else:
                return visitor.visitChildren(self)




    def last_formal_parameter(self):

        localctx = JavaParser.Last_formal_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_last_formal_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1545
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1542
                    self.variable_modifier() 
                self.state = 1547
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

            self.state = 1548
            self.type_type()
            self.state = 1552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==126 or _la==128:
                self.state = 1549
                self.annotation()
                self.state = 1554
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1555
            self.match(JavaParser.ELLIPSIS)
            self.state = 1556
            self.variable_declarator_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualified_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_name" ):
                listener.enterQualified_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_name" ):
                listener.exitQualified_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualified_name" ):
                return visitor.visitQualified_name(self)
            else:
                return visitor.visitChildren(self)




    def qualified_name(self):

        localctx = JavaParser.Qualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_qualified_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            self.identifier()
            self.state = 1563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1559
                    self.match(JavaParser.DOT)
                    self.state = 1560
                    self.identifier() 
                self.state = 1565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_type_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_declaration(self):
            return self.getTypedRuleContext(JavaParser.Class_declarationContext,0)


        def interface_declaration(self):
            return self.getTypedRuleContext(JavaParser.Interface_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(JavaParser.Record_declarationContext,0)


        def class_or_interface_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Class_or_interface_modifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.Class_or_interface_modifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_local_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_type_declaration" ):
                listener.enterLocal_type_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_type_declaration" ):
                listener.exitLocal_type_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocal_type_declaration" ):
                return visitor.visitLocal_type_declaration(self)
            else:
                return visitor.visitChildren(self)




    def local_type_declaration(self):

        localctx = JavaParser.Local_type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_local_type_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1566
                    self.class_or_interface_modifier() 
                self.state = 1571
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

            self.state = 1575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 1572
                self.class_declaration()
                pass
            elif token in [28]:
                self.state = 1573
                self.interface_declaration()
                pass
            elif token in [63]:
                self.state = 1574
                self.record_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Par_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAREN_S(self):
            return self.getToken(JavaParser.PAREN_S, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def PAREN_E(self):
            return self.getToken(JavaParser.PAREN_E, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_par_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_expression" ):
                listener.enterPar_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_expression" ):
                listener.exitPar_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPar_expression" ):
                return visitor.visitPar_expression(self)
            else:
                return visitor.visitChildren(self)




    def par_expression(self):

        localctx = JavaParser.Par_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_par_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self.match(JavaParser.PAREN_S)
            self.state = 1578
            self.expression(0)
            self.state = 1579
            self.match(JavaParser.PAREN_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_list" ):
                return visitor.visitExpression_list(self)
            else:
                return visitor.visitChildren(self)




    def expression_list(self):

        localctx = JavaParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self.expression(0)
            self.state = 1586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 1582
                self.match(JavaParser.COMMA)
                self.state = 1583
                self.expression(0)
                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def PAREN_S(self):
            return self.getToken(JavaParser.PAREN_S, 0)

        def PAREN_E(self):
            return self.getToken(JavaParser.PAREN_E, 0)

        def expression_list(self):
            return self.getTypedRuleContext(JavaParser.Expression_listContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_method_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_call" ):
                listener.enterMethod_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_call" ):
                listener.exitMethod_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_call" ):
                return visitor.visitMethod_call(self)
            else:
                return visitor.visitChildren(self)




    def method_call(self):

        localctx = JavaParser.Method_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_method_call)
        self._la = 0 # Token type
        try:
            self.state = 1608
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1589
                self.identifier()
                self.state = 1590
                self.match(JavaParser.PAREN_S)
                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 360288099068149697) != 0):
                    self.state = 1591
                    self.expression_list()


                self.state = 1594
                self.match(JavaParser.PAREN_E)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1596
                self.match(JavaParser.THIS)
                self.state = 1597
                self.match(JavaParser.PAREN_S)
                self.state = 1599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 360288099068149697) != 0):
                    self.state = 1598
                    self.expression_list()


                self.state = 1601
                self.match(JavaParser.PAREN_E)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1602
                self.match(JavaParser.SUPER)
                self.state = 1603
                self.match(JavaParser.PAREN_S)
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 360288099068149697) != 0):
                    self.state = 1604
                    self.expression_list()


                self.state = 1607
                self.match(JavaParser.PAREN_E)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Guarded_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAREN_S(self):
            return self.getToken(JavaParser.PAREN_S, 0)

        def guarded_pattern(self):
            return self.getTypedRuleContext(JavaParser.Guarded_patternContext,0)


        def PAREN_E(self):
            return self.getToken(JavaParser.PAREN_E, 0)

        def type_type(self):
            return self.getTypedRuleContext(JavaParser.Type_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variable_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Variable_modifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.Variable_modifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LOG_AND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LOG_AND)
            else:
                return self.getToken(JavaParser.LOG_AND, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_guarded_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuarded_pattern" ):
                listener.enterGuarded_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuarded_pattern" ):
                listener.exitGuarded_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuarded_pattern" ):
                return visitor.visitGuarded_pattern(self)
            else:
                return visitor.visitChildren(self)



    def guarded_pattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.Guarded_patternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 228
        self.enterRecursionRule(localctx, 228, self.RULE_guarded_pattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.state = 1611
                self.match(JavaParser.PAREN_S)
                self.state = 1612
                self.guarded_pattern(0)
                self.state = 1613
                self.match(JavaParser.PAREN_E)
                pass
            elif token in [3, 5, 8, 14, 18, 20, 27, 29, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 126, 128]:
                self.state = 1618
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1615
                        self.variable_modifier() 
                    self.state = 1620
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

                self.state = 1621
                self.type_type()
                self.state = 1625
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1622
                        self.annotation() 
                    self.state = 1627
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

                self.state = 1628
                self.identifier()
                self.state = 1633
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1629
                        self.match(JavaParser.LOG_AND)
                        self.state = 1630
                        self.expression(0) 
                    self.state = 1635
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1643
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.Guarded_patternContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_guarded_pattern)
                    self.state = 1638
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1639
                    self.match(JavaParser.LOG_AND)
                    self.state = 1640
                    self.expression(0) 
                self.state = 1645
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_wildcard_type_arguments(self):
            return self.getTypedRuleContext(JavaParser.Non_wildcard_type_argumentsContext,0)


        def created_name(self):
            return self.getTypedRuleContext(JavaParser.Created_nameContext,0)


        def class_creator_rest(self):
            return self.getTypedRuleContext(JavaParser.Class_creator_restContext,0)


        def array_creator_rest(self):
            return self.getTypedRuleContext(JavaParser.Array_creator_restContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_creator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator" ):
                listener.enterCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator" ):
                listener.exitCreator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreator" ):
                return visitor.visitCreator(self)
            else:
                return visitor.visitChildren(self)




    def creator(self):

        localctx = JavaParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_creator)
        try:
            self.state = 1655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1646
                self.non_wildcard_type_arguments()
                self.state = 1647
                self.created_name()
                self.state = 1648
                self.class_creator_rest()
                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1650
                self.created_name()
                self.state = 1653
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [74]:
                    self.state = 1651
                    self.array_creator_rest()
                    pass
                elif token in [70]:
                    self.state = 1652
                    self.class_creator_rest()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Created_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def type_arguments_or_diamond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.Type_arguments_or_diamondContext)
            else:
                return self.getTypedRuleContext(JavaParser.Type_arguments_or_diamondContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def primitive_type(self):
            return self.getTypedRuleContext(JavaParser.Primitive_typeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_created_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreated_name" ):
                listener.enterCreated_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreated_name" ):
                listener.exitCreated_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreated_name" ):
                return visitor.visitCreated_name(self)
            else:
                return visitor.visitChildren(self)




    def created_name(self):

        localctx = JavaParser.Created_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_created_name)
        self._la = 0 # Token type
        try:
            self.state = 1672
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1657
                self.identifier()
                self.state = 1659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1658
                    self.type_arguments_or_diamond()


                self.state = 1668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==69:
                    self.state = 1661
                    self.match(JavaParser.DOT)
                    self.state = 1662
                    self.identifier()
                    self.state = 1664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==92:
                        self.state = 1663
                        self.type_arguments_or_diamond()


                    self.state = 1670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1671
                self.primitive_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inner_creatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def class_creator_rest(self):
            return self.getTypedRuleContext(JavaParser.Class_creator_restContext,0)


        def non_wild_card_type_arguments_or_diamond(self):
            return self.getTypedRuleContext(JavaParser.Non_wild_card_type_arguments_or_diamondContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_inner_creator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInner_creator" ):
                listener.enterInner_creator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInner_creator" ):
                listener.exitInner_creator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInner_creator" ):
                return visitor.visitInner_creator(self)
            else:
                return visitor.visitChildren(self)




    def inner_creator(self):

        localctx = JavaParser.Inner_creatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_inner_creator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self.identifier()
            self.state = 1676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1675
                self.non_wild_card_type_arguments_or_diamond()


            self.state = 1678
            self.class_creator_rest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_creator_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY_S(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ARRAY_S)
            else:
                return self.getToken(JavaParser.ARRAY_S, i)

        def ARRAY_E(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ARRAY_E)
            else:
                return self.getToken(JavaParser.ARRAY_E, i)

        def array_initializer(self):
            return self.getTypedRuleContext(JavaParser.Array_initializerContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_array_creator_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_creator_rest" ):
                listener.enterArray_creator_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_creator_rest" ):
                listener.exitArray_creator_rest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_creator_rest" ):
                return visitor.visitArray_creator_rest(self)
            else:
                return visitor.visitChildren(self)




    def array_creator_rest(self):

        localctx = JavaParser.Array_creator_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_array_creator_rest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            self.match(JavaParser.ARRAY_S)
            self.state = 1708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [75]:
                self.state = 1681
                self.match(JavaParser.ARRAY_E)
                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==74:
                    self.state = 1682
                    self.match(JavaParser.ARRAY_S)
                    self.state = 1683
                    self.match(JavaParser.ARRAY_E)
                    self.state = 1688
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1689
                self.array_initializer()
                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 31, 37, 40, 41, 43, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 103, 104, 105, 106, 126, 128]:
                self.state = 1690
                self.expression(0)
                self.state = 1691
                self.match(JavaParser.ARRAY_E)
                self.state = 1698
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1692
                        self.match(JavaParser.ARRAY_S)
                        self.state = 1693
                        self.expression(0)
                        self.state = 1694
                        self.match(JavaParser.ARRAY_E) 
                    self.state = 1700
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

                self.state = 1705
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1701
                        self.match(JavaParser.ARRAY_S)
                        self.state = 1702
                        self.match(JavaParser.ARRAY_E) 
                    self.state = 1707
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_creator_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def class_body(self):
            return self.getTypedRuleContext(JavaParser.Class_bodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_class_creator_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_creator_rest" ):
                listener.enterClass_creator_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_creator_rest" ):
                listener.exitClass_creator_rest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_creator_rest" ):
                return visitor.visitClass_creator_rest(self)
            else:
                return visitor.visitChildren(self)




    def class_creator_rest(self):

        localctx = JavaParser.Class_creator_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_class_creator_rest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1710
            self.arguments()
            self.state = 1712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 1711
                self.class_body()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_generic_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_wildcard_type_arguments(self):
            return self.getTypedRuleContext(JavaParser.Non_wildcard_type_argumentsContext,0)


        def explicit_generic_invocation_suffix(self):
            return self.getTypedRuleContext(JavaParser.Explicit_generic_invocation_suffixContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicit_generic_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_generic_invocation" ):
                listener.enterExplicit_generic_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_generic_invocation" ):
                listener.exitExplicit_generic_invocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicit_generic_invocation" ):
                return visitor.visitExplicit_generic_invocation(self)
            else:
                return visitor.visitChildren(self)




    def explicit_generic_invocation(self):

        localctx = JavaParser.Explicit_generic_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_explicit_generic_invocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1714
            self.non_wildcard_type_arguments()
            self.state = 1715
            self.explicit_generic_invocation_suffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[104] = self.expression_sempred
        self._predicates[114] = self.guarded_pattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 3)
         

    def guarded_pattern_sempred(self, localctx:Guarded_patternContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         




